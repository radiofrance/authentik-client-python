# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist

from typing import List, Optional

from authentik.models.cache import Cache
from authentik.models.dummy_policy import DummyPolicy
from authentik.models.dummy_policy_request import DummyPolicyRequest
from authentik.models.event_matcher_policy import EventMatcherPolicy
from authentik.models.event_matcher_policy_request import EventMatcherPolicyRequest
from authentik.models.expression_policy import ExpressionPolicy
from authentik.models.expression_policy_request import ExpressionPolicyRequest
from authentik.models.paginated_dummy_policy_list import PaginatedDummyPolicyList
from authentik.models.paginated_event_matcher_policy_list import PaginatedEventMatcherPolicyList
from authentik.models.paginated_expression_policy_list import PaginatedExpressionPolicyList
from authentik.models.paginated_password_expiry_policy_list import PaginatedPasswordExpiryPolicyList
from authentik.models.paginated_password_policy_list import PaginatedPasswordPolicyList
from authentik.models.paginated_policy_binding_list import PaginatedPolicyBindingList
from authentik.models.paginated_policy_list import PaginatedPolicyList
from authentik.models.paginated_reputation_list import PaginatedReputationList
from authentik.models.paginated_reputation_policy_list import PaginatedReputationPolicyList
from authentik.models.password_expiry_policy import PasswordExpiryPolicy
from authentik.models.password_expiry_policy_request import PasswordExpiryPolicyRequest
from authentik.models.password_policy import PasswordPolicy
from authentik.models.password_policy_request import PasswordPolicyRequest
from authentik.models.patched_dummy_policy_request import PatchedDummyPolicyRequest
from authentik.models.patched_event_matcher_policy_request import PatchedEventMatcherPolicyRequest
from authentik.models.patched_expression_policy_request import PatchedExpressionPolicyRequest
from authentik.models.patched_password_expiry_policy_request import PatchedPasswordExpiryPolicyRequest
from authentik.models.patched_password_policy_request import PatchedPasswordPolicyRequest
from authentik.models.patched_policy_binding_request import PatchedPolicyBindingRequest
from authentik.models.patched_reputation_policy_request import PatchedReputationPolicyRequest
from authentik.models.policy import Policy
from authentik.models.policy_binding import PolicyBinding
from authentik.models.policy_binding_request import PolicyBindingRequest
from authentik.models.policy_test_request import PolicyTestRequest
from authentik.models.policy_test_result import PolicyTestResult
from authentik.models.reputation import Reputation
from authentik.models.reputation_policy import ReputationPolicy
from authentik.models.reputation_policy_request import ReputationPolicyRequest
from authentik.models.type_create import TypeCreate
from authentik.models.used_by import UsedBy

from authentik.api_client import ApiClient
from authentik.api_response import ApiResponse
from authentik.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PoliciesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def policies_all_cache_clear_create(self, **kwargs) -> None:  # noqa: E501
        """policies_all_cache_clear_create  # noqa: E501

        Clear policy cache  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_cache_clear_create(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_all_cache_clear_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_all_cache_clear_create_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def policies_all_cache_clear_create_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_all_cache_clear_create  # noqa: E501

        Clear policy cache  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_cache_clear_create_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_all_cache_clear_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/policies/all/cache_clear/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_all_cache_info_retrieve(self, **kwargs) -> Cache:  # noqa: E501
        """policies_all_cache_info_retrieve  # noqa: E501

        Info about cached policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_cache_info_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Cache
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_all_cache_info_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_all_cache_info_retrieve_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def policies_all_cache_info_retrieve_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_all_cache_info_retrieve  # noqa: E501

        Info about cached policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_cache_info_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Cache, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_all_cache_info_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "Cache",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/all/cache_info/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_all_destroy(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy.")], **kwargs) -> None:  # noqa: E501
        """policies_all_destroy  # noqa: E501

        Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_destroy(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_all_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_all_destroy_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_all_destroy_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_all_destroy  # noqa: E501

        Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_destroy_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_all_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/policies/all/{policy_uuid}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_all_list(self, bindings__isnull : Optional[StrictBool] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, promptstage__isnull : Optional[StrictBool] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, **kwargs) -> PaginatedPolicyList:  # noqa: E501
        """policies_all_list  # noqa: E501

        Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_list(bindings__isnull, ordering, page, page_size, promptstage__isnull, search, async_req=True)
        >>> result = thread.get()

        :param bindings__isnull:
        :type bindings__isnull: bool
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param promptstage__isnull:
        :type promptstage__isnull: bool
        :param search: A search term.
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedPolicyList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_all_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_all_list_with_http_info(bindings__isnull, ordering, page, page_size, promptstage__isnull, search, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_all_list_with_http_info(self, bindings__isnull : Optional[StrictBool] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, promptstage__isnull : Optional[StrictBool] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_all_list  # noqa: E501

        Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_list_with_http_info(bindings__isnull, ordering, page, page_size, promptstage__isnull, search, async_req=True)
        >>> result = thread.get()

        :param bindings__isnull:
        :type bindings__isnull: bool
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param promptstage__isnull:
        :type promptstage__isnull: bool
        :param search: A search term.
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedPolicyList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bindings__isnull',
            'ordering',
            'page',
            'page_size',
            'promptstage__isnull',
            'search'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_all_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('bindings__isnull') is not None:  # noqa: E501
            _query_params.append(('bindings__isnull', _params['bindings__isnull']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('promptstage__isnull') is not None:  # noqa: E501
            _query_params.append(('promptstage__isnull', _params['promptstage__isnull']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedPolicyList",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/all/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_all_retrieve(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy.")], **kwargs) -> Policy:  # noqa: E501
        """policies_all_retrieve  # noqa: E501

        Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_retrieve(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Policy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_all_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_all_retrieve_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_all_retrieve_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_all_retrieve  # noqa: E501

        Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_retrieve_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Policy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_all_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "Policy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/all/{policy_uuid}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_all_test_create(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy.")], policy_test_request : PolicyTestRequest, **kwargs) -> PolicyTestResult:  # noqa: E501
        """policies_all_test_create  # noqa: E501

        Test policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_test_create(policy_uuid, policy_test_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Policy. (required)
        :type policy_uuid: str
        :param policy_test_request: (required)
        :type policy_test_request: PolicyTestRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PolicyTestResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_all_test_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_all_test_create_with_http_info(policy_uuid, policy_test_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_all_test_create_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy.")], policy_test_request : PolicyTestRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_all_test_create  # noqa: E501

        Test policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_test_create_with_http_info(policy_uuid, policy_test_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Policy. (required)
        :type policy_uuid: str
        :param policy_test_request: (required)
        :type policy_test_request: PolicyTestRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PolicyTestResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'policy_test_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_all_test_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['policy_test_request'] is not None:
            _body_params = _params['policy_test_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PolicyTestResult",
            '400': None,
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/all/{policy_uuid}/test/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_all_types_list(self, **kwargs) -> List[TypeCreate]:  # noqa: E501
        """policies_all_types_list  # noqa: E501

        Get all creatable policy types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_types_list(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[TypeCreate]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_all_types_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_all_types_list_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def policies_all_types_list_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_all_types_list  # noqa: E501

        Get all creatable policy types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_types_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[TypeCreate], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_all_types_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "List[TypeCreate]",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/all/types/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_all_used_by_list(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy.")], **kwargs) -> List[UsedBy]:  # noqa: E501
        """policies_all_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_used_by_list(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[UsedBy]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_all_used_by_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_all_used_by_list_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_all_used_by_list_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_all_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_all_used_by_list_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[UsedBy], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_all_used_by_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "List[UsedBy]",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/all/{policy_uuid}/used_by/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_bindings_create(self, policy_binding_request : PolicyBindingRequest, **kwargs) -> PolicyBinding:  # noqa: E501
        """policies_bindings_create  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_create(policy_binding_request, async_req=True)
        >>> result = thread.get()

        :param policy_binding_request: (required)
        :type policy_binding_request: PolicyBindingRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PolicyBinding
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_bindings_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_bindings_create_with_http_info(policy_binding_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_bindings_create_with_http_info(self, policy_binding_request : PolicyBindingRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_bindings_create  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_create_with_http_info(policy_binding_request, async_req=True)
        >>> result = thread.get()

        :param policy_binding_request: (required)
        :type policy_binding_request: PolicyBindingRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PolicyBinding, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_binding_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_bindings_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['policy_binding_request'] is not None:
            _body_params = _params['policy_binding_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '201': "PolicyBinding",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/bindings/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_bindings_destroy(self, policy_binding_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy Binding.")], **kwargs) -> None:  # noqa: E501
        """policies_bindings_destroy  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_destroy(policy_binding_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_binding_uuid: A UUID string identifying this Policy Binding. (required)
        :type policy_binding_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_bindings_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_bindings_destroy_with_http_info(policy_binding_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_bindings_destroy_with_http_info(self, policy_binding_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy Binding.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_bindings_destroy  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_destroy_with_http_info(policy_binding_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_binding_uuid: A UUID string identifying this Policy Binding. (required)
        :type policy_binding_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'policy_binding_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_bindings_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_binding_uuid']:
            _path_params['policy_binding_uuid'] = _params['policy_binding_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/policies/bindings/{policy_binding_uuid}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_bindings_list(self, enabled : Optional[StrictBool] = None, order : Optional[StrictInt] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy : Optional[StrictStr] = None, policy__isnull : Optional[StrictBool] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, target : Optional[StrictStr] = None, target_in : Optional[conlist(StrictStr)] = None, timeout : Optional[StrictInt] = None, **kwargs) -> PaginatedPolicyBindingList:  # noqa: E501
        """policies_bindings_list  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_list(enabled, order, ordering, page, page_size, policy, policy__isnull, search, target, target_in, timeout, async_req=True)
        >>> result = thread.get()

        :param enabled:
        :type enabled: bool
        :param order:
        :type order: int
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy:
        :type policy: str
        :param policy__isnull:
        :type policy__isnull: bool
        :param search: A search term.
        :type search: str
        :param target:
        :type target: str
        :param target_in:
        :type target_in: List[str]
        :param timeout:
        :type timeout: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedPolicyBindingList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_bindings_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_bindings_list_with_http_info(enabled, order, ordering, page, page_size, policy, policy__isnull, search, target, target_in, timeout, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_bindings_list_with_http_info(self, enabled : Optional[StrictBool] = None, order : Optional[StrictInt] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy : Optional[StrictStr] = None, policy__isnull : Optional[StrictBool] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, target : Optional[StrictStr] = None, target_in : Optional[conlist(StrictStr)] = None, timeout : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_bindings_list  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_list_with_http_info(enabled, order, ordering, page, page_size, policy, policy__isnull, search, target, target_in, timeout, async_req=True)
        >>> result = thread.get()

        :param enabled:
        :type enabled: bool
        :param order:
        :type order: int
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy:
        :type policy: str
        :param policy__isnull:
        :type policy__isnull: bool
        :param search: A search term.
        :type search: str
        :param target:
        :type target: str
        :param target_in:
        :type target_in: List[str]
        :param timeout:
        :type timeout: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedPolicyBindingList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'enabled',
            'order',
            'ordering',
            'page',
            'page_size',
            'policy',
            'policy__isnull',
            'search',
            'target',
            'target_in',
            'timeout'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_bindings_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('enabled') is not None:  # noqa: E501
            _query_params.append(('enabled', _params['enabled']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('policy') is not None:  # noqa: E501
            _query_params.append(('policy', _params['policy']))

        if _params.get('policy__isnull') is not None:  # noqa: E501
            _query_params.append(('policy__isnull', _params['policy__isnull']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('target') is not None:  # noqa: E501
            _query_params.append(('target', _params['target']))

        if _params.get('target_in') is not None:  # noqa: E501
            _query_params.append(('target_in', _params['target_in']))
            _collection_formats['target_in'] = 'multi'

        if _params.get('timeout') is not None:  # noqa: E501
            _query_params.append(('timeout', _params['timeout']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedPolicyBindingList",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/bindings/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_bindings_partial_update(self, policy_binding_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy Binding.")], patched_policy_binding_request : Optional[PatchedPolicyBindingRequest] = None, **kwargs) -> PolicyBinding:  # noqa: E501
        """policies_bindings_partial_update  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_partial_update(policy_binding_uuid, patched_policy_binding_request, async_req=True)
        >>> result = thread.get()

        :param policy_binding_uuid: A UUID string identifying this Policy Binding. (required)
        :type policy_binding_uuid: str
        :param patched_policy_binding_request:
        :type patched_policy_binding_request: PatchedPolicyBindingRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PolicyBinding
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_bindings_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_bindings_partial_update_with_http_info(policy_binding_uuid, patched_policy_binding_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_bindings_partial_update_with_http_info(self, policy_binding_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy Binding.")], patched_policy_binding_request : Optional[PatchedPolicyBindingRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_bindings_partial_update  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_partial_update_with_http_info(policy_binding_uuid, patched_policy_binding_request, async_req=True)
        >>> result = thread.get()

        :param policy_binding_uuid: A UUID string identifying this Policy Binding. (required)
        :type policy_binding_uuid: str
        :param patched_policy_binding_request:
        :type patched_policy_binding_request: PatchedPolicyBindingRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PolicyBinding, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_binding_uuid',
            'patched_policy_binding_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_bindings_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_binding_uuid']:
            _path_params['policy_binding_uuid'] = _params['policy_binding_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_policy_binding_request'] is not None:
            _body_params = _params['patched_policy_binding_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PolicyBinding",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/bindings/{policy_binding_uuid}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_bindings_retrieve(self, policy_binding_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy Binding.")], **kwargs) -> PolicyBinding:  # noqa: E501
        """policies_bindings_retrieve  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_retrieve(policy_binding_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_binding_uuid: A UUID string identifying this Policy Binding. (required)
        :type policy_binding_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PolicyBinding
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_bindings_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_bindings_retrieve_with_http_info(policy_binding_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_bindings_retrieve_with_http_info(self, policy_binding_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy Binding.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_bindings_retrieve  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_retrieve_with_http_info(policy_binding_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_binding_uuid: A UUID string identifying this Policy Binding. (required)
        :type policy_binding_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PolicyBinding, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_binding_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_bindings_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_binding_uuid']:
            _path_params['policy_binding_uuid'] = _params['policy_binding_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PolicyBinding",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/bindings/{policy_binding_uuid}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_bindings_update(self, policy_binding_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy Binding.")], policy_binding_request : PolicyBindingRequest, **kwargs) -> PolicyBinding:  # noqa: E501
        """policies_bindings_update  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_update(policy_binding_uuid, policy_binding_request, async_req=True)
        >>> result = thread.get()

        :param policy_binding_uuid: A UUID string identifying this Policy Binding. (required)
        :type policy_binding_uuid: str
        :param policy_binding_request: (required)
        :type policy_binding_request: PolicyBindingRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PolicyBinding
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_bindings_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_bindings_update_with_http_info(policy_binding_uuid, policy_binding_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_bindings_update_with_http_info(self, policy_binding_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy Binding.")], policy_binding_request : PolicyBindingRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_bindings_update  # noqa: E501

        PolicyBinding Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_update_with_http_info(policy_binding_uuid, policy_binding_request, async_req=True)
        >>> result = thread.get()

        :param policy_binding_uuid: A UUID string identifying this Policy Binding. (required)
        :type policy_binding_uuid: str
        :param policy_binding_request: (required)
        :type policy_binding_request: PolicyBindingRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PolicyBinding, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_binding_uuid',
            'policy_binding_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_bindings_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_binding_uuid']:
            _path_params['policy_binding_uuid'] = _params['policy_binding_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['policy_binding_request'] is not None:
            _body_params = _params['policy_binding_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PolicyBinding",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/bindings/{policy_binding_uuid}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_bindings_used_by_list(self, policy_binding_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy Binding.")], **kwargs) -> List[UsedBy]:  # noqa: E501
        """policies_bindings_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_used_by_list(policy_binding_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_binding_uuid: A UUID string identifying this Policy Binding. (required)
        :type policy_binding_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[UsedBy]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_bindings_used_by_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_bindings_used_by_list_with_http_info(policy_binding_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_bindings_used_by_list_with_http_info(self, policy_binding_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Policy Binding.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_bindings_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_bindings_used_by_list_with_http_info(policy_binding_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_binding_uuid: A UUID string identifying this Policy Binding. (required)
        :type policy_binding_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[UsedBy], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_binding_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_bindings_used_by_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_binding_uuid']:
            _path_params['policy_binding_uuid'] = _params['policy_binding_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "List[UsedBy]",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/bindings/{policy_binding_uuid}/used_by/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_dummy_create(self, dummy_policy_request : DummyPolicyRequest, **kwargs) -> DummyPolicy:  # noqa: E501
        """policies_dummy_create  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_create(dummy_policy_request, async_req=True)
        >>> result = thread.get()

        :param dummy_policy_request: (required)
        :type dummy_policy_request: DummyPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DummyPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_dummy_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_dummy_create_with_http_info(dummy_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_dummy_create_with_http_info(self, dummy_policy_request : DummyPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_dummy_create  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_create_with_http_info(dummy_policy_request, async_req=True)
        >>> result = thread.get()

        :param dummy_policy_request: (required)
        :type dummy_policy_request: DummyPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DummyPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'dummy_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_dummy_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dummy_policy_request'] is not None:
            _body_params = _params['dummy_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '201': "DummyPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/dummy/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_dummy_destroy(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Dummy Policy.")], **kwargs) -> None:  # noqa: E501
        """policies_dummy_destroy  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_destroy(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Dummy Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_dummy_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_dummy_destroy_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_dummy_destroy_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Dummy Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_dummy_destroy  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_destroy_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Dummy Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_dummy_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/policies/dummy/{policy_uuid}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_dummy_list(self, created : Optional[datetime] = None, execution_logging : Optional[StrictBool] = None, last_updated : Optional[datetime] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy_uuid : Optional[StrictStr] = None, result : Optional[StrictBool] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, wait_max : Optional[StrictInt] = None, wait_min : Optional[StrictInt] = None, **kwargs) -> PaginatedDummyPolicyList:  # noqa: E501
        """policies_dummy_list  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_list(created, execution_logging, last_updated, name, ordering, page, page_size, policy_uuid, result, search, wait_max, wait_min, async_req=True)
        >>> result = thread.get()

        :param created:
        :type created: datetime
        :param execution_logging:
        :type execution_logging: bool
        :param last_updated:
        :type last_updated: datetime
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy_uuid:
        :type policy_uuid: str
        :param result:
        :type result: bool
        :param search: A search term.
        :type search: str
        :param wait_max:
        :type wait_max: int
        :param wait_min:
        :type wait_min: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedDummyPolicyList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_dummy_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_dummy_list_with_http_info(created, execution_logging, last_updated, name, ordering, page, page_size, policy_uuid, result, search, wait_max, wait_min, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_dummy_list_with_http_info(self, created : Optional[datetime] = None, execution_logging : Optional[StrictBool] = None, last_updated : Optional[datetime] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy_uuid : Optional[StrictStr] = None, result : Optional[StrictBool] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, wait_max : Optional[StrictInt] = None, wait_min : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_dummy_list  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_list_with_http_info(created, execution_logging, last_updated, name, ordering, page, page_size, policy_uuid, result, search, wait_max, wait_min, async_req=True)
        >>> result = thread.get()

        :param created:
        :type created: datetime
        :param execution_logging:
        :type execution_logging: bool
        :param last_updated:
        :type last_updated: datetime
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy_uuid:
        :type policy_uuid: str
        :param result:
        :type result: bool
        :param search: A search term.
        :type search: str
        :param wait_max:
        :type wait_max: int
        :param wait_min:
        :type wait_min: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedDummyPolicyList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'created',
            'execution_logging',
            'last_updated',
            'name',
            'ordering',
            'page',
            'page_size',
            'policy_uuid',
            'result',
            'search',
            'wait_max',
            'wait_min'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_dummy_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('created') is not None:  # noqa: E501
            if isinstance(_params['created'], datetime):
                _query_params.append(('created', _params['created'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created', _params['created']))

        if _params.get('execution_logging') is not None:  # noqa: E501
            _query_params.append(('execution_logging', _params['execution_logging']))

        if _params.get('last_updated') is not None:  # noqa: E501
            if isinstance(_params['last_updated'], datetime):
                _query_params.append(('last_updated', _params['last_updated'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('last_updated', _params['last_updated']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('policy_uuid') is not None:  # noqa: E501
            _query_params.append(('policy_uuid', _params['policy_uuid']))

        if _params.get('result') is not None:  # noqa: E501
            _query_params.append(('result', _params['result']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('wait_max') is not None:  # noqa: E501
            _query_params.append(('wait_max', _params['wait_max']))

        if _params.get('wait_min') is not None:  # noqa: E501
            _query_params.append(('wait_min', _params['wait_min']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedDummyPolicyList",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/dummy/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_dummy_partial_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Dummy Policy.")], patched_dummy_policy_request : Optional[PatchedDummyPolicyRequest] = None, **kwargs) -> DummyPolicy:  # noqa: E501
        """policies_dummy_partial_update  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_partial_update(policy_uuid, patched_dummy_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Dummy Policy. (required)
        :type policy_uuid: str
        :param patched_dummy_policy_request:
        :type patched_dummy_policy_request: PatchedDummyPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DummyPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_dummy_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_dummy_partial_update_with_http_info(policy_uuid, patched_dummy_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_dummy_partial_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Dummy Policy.")], patched_dummy_policy_request : Optional[PatchedDummyPolicyRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_dummy_partial_update  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_partial_update_with_http_info(policy_uuid, patched_dummy_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Dummy Policy. (required)
        :type policy_uuid: str
        :param patched_dummy_policy_request:
        :type patched_dummy_policy_request: PatchedDummyPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DummyPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'patched_dummy_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_dummy_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_dummy_policy_request'] is not None:
            _body_params = _params['patched_dummy_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "DummyPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/dummy/{policy_uuid}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_dummy_retrieve(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Dummy Policy.")], **kwargs) -> DummyPolicy:  # noqa: E501
        """policies_dummy_retrieve  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_retrieve(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Dummy Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DummyPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_dummy_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_dummy_retrieve_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_dummy_retrieve_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Dummy Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_dummy_retrieve  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_retrieve_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Dummy Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DummyPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_dummy_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "DummyPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/dummy/{policy_uuid}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_dummy_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Dummy Policy.")], dummy_policy_request : DummyPolicyRequest, **kwargs) -> DummyPolicy:  # noqa: E501
        """policies_dummy_update  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_update(policy_uuid, dummy_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Dummy Policy. (required)
        :type policy_uuid: str
        :param dummy_policy_request: (required)
        :type dummy_policy_request: DummyPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DummyPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_dummy_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_dummy_update_with_http_info(policy_uuid, dummy_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_dummy_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Dummy Policy.")], dummy_policy_request : DummyPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_dummy_update  # noqa: E501

        Dummy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_update_with_http_info(policy_uuid, dummy_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Dummy Policy. (required)
        :type policy_uuid: str
        :param dummy_policy_request: (required)
        :type dummy_policy_request: DummyPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DummyPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'dummy_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_dummy_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dummy_policy_request'] is not None:
            _body_params = _params['dummy_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "DummyPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/dummy/{policy_uuid}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_dummy_used_by_list(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Dummy Policy.")], **kwargs) -> List[UsedBy]:  # noqa: E501
        """policies_dummy_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_used_by_list(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Dummy Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[UsedBy]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_dummy_used_by_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_dummy_used_by_list_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_dummy_used_by_list_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Dummy Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_dummy_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_dummy_used_by_list_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Dummy Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[UsedBy], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_dummy_used_by_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "List[UsedBy]",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/dummy/{policy_uuid}/used_by/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_event_matcher_create(self, event_matcher_policy_request : EventMatcherPolicyRequest, **kwargs) -> EventMatcherPolicy:  # noqa: E501
        """policies_event_matcher_create  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_create(event_matcher_policy_request, async_req=True)
        >>> result = thread.get()

        :param event_matcher_policy_request: (required)
        :type event_matcher_policy_request: EventMatcherPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EventMatcherPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_event_matcher_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_event_matcher_create_with_http_info(event_matcher_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_event_matcher_create_with_http_info(self, event_matcher_policy_request : EventMatcherPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_event_matcher_create  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_create_with_http_info(event_matcher_policy_request, async_req=True)
        >>> result = thread.get()

        :param event_matcher_policy_request: (required)
        :type event_matcher_policy_request: EventMatcherPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EventMatcherPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'event_matcher_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_event_matcher_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['event_matcher_policy_request'] is not None:
            _body_params = _params['event_matcher_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '201': "EventMatcherPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/event_matcher/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_event_matcher_destroy(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Event Matcher Policy.")], **kwargs) -> None:  # noqa: E501
        """policies_event_matcher_destroy  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_destroy(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Event Matcher Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_event_matcher_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_event_matcher_destroy_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_event_matcher_destroy_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Event Matcher Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_event_matcher_destroy  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_destroy_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Event Matcher Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_event_matcher_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/policies/event_matcher/{policy_uuid}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_event_matcher_list(self, action : Annotated[Optional[StrictStr], Field(description="Match created events with this action type. When left empty, all action types will be matched.  * `login` - Login * `login_failed` - Login Failed * `logout` - Logout * `user_write` - User Write * `suspicious_request` - Suspicious Request * `password_set` - Password Set * `secret_view` - Secret View * `secret_rotate` - Secret Rotate * `invitation_used` - Invite Used * `authorize_application` - Authorize Application * `source_linked` - Source Linked * `impersonation_started` - Impersonation Started * `impersonation_ended` - Impersonation Ended * `flow_execution` - Flow Execution * `policy_execution` - Policy Execution * `policy_exception` - Policy Exception * `property_mapping_exception` - Property Mapping Exception * `system_task_execution` - System Task Execution * `system_task_exception` - System Task Exception * `system_exception` - System Exception * `configuration_error` - Configuration Error * `model_created` - Model Created * `model_updated` - Model Updated * `model_deleted` - Model Deleted * `email_sent` - Email Sent * `update_available` - Update Available * `custom_` - Custom Prefix")] = None, app : Optional[StrictStr] = None, client_ip : Optional[StrictStr] = None, created : Optional[datetime] = None, execution_logging : Optional[StrictBool] = None, last_updated : Optional[datetime] = None, model : Optional[StrictStr] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy_uuid : Optional[StrictStr] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, **kwargs) -> PaginatedEventMatcherPolicyList:  # noqa: E501
        """policies_event_matcher_list  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_list(action, app, client_ip, created, execution_logging, last_updated, model, name, ordering, page, page_size, policy_uuid, search, async_req=True)
        >>> result = thread.get()

        :param action: Match created events with this action type. When left empty, all action types will be matched.  * `login` - Login * `login_failed` - Login Failed * `logout` - Logout * `user_write` - User Write * `suspicious_request` - Suspicious Request * `password_set` - Password Set * `secret_view` - Secret View * `secret_rotate` - Secret Rotate * `invitation_used` - Invite Used * `authorize_application` - Authorize Application * `source_linked` - Source Linked * `impersonation_started` - Impersonation Started * `impersonation_ended` - Impersonation Ended * `flow_execution` - Flow Execution * `policy_execution` - Policy Execution * `policy_exception` - Policy Exception * `property_mapping_exception` - Property Mapping Exception * `system_task_execution` - System Task Execution * `system_task_exception` - System Task Exception * `system_exception` - System Exception * `configuration_error` - Configuration Error * `model_created` - Model Created * `model_updated` - Model Updated * `model_deleted` - Model Deleted * `email_sent` - Email Sent * `update_available` - Update Available * `custom_` - Custom Prefix
        :type action: str
        :param app:
        :type app: str
        :param client_ip:
        :type client_ip: str
        :param created:
        :type created: datetime
        :param execution_logging:
        :type execution_logging: bool
        :param last_updated:
        :type last_updated: datetime
        :param model:
        :type model: str
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy_uuid:
        :type policy_uuid: str
        :param search: A search term.
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedEventMatcherPolicyList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_event_matcher_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_event_matcher_list_with_http_info(action, app, client_ip, created, execution_logging, last_updated, model, name, ordering, page, page_size, policy_uuid, search, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_event_matcher_list_with_http_info(self, action : Annotated[Optional[StrictStr], Field(description="Match created events with this action type. When left empty, all action types will be matched.  * `login` - Login * `login_failed` - Login Failed * `logout` - Logout * `user_write` - User Write * `suspicious_request` - Suspicious Request * `password_set` - Password Set * `secret_view` - Secret View * `secret_rotate` - Secret Rotate * `invitation_used` - Invite Used * `authorize_application` - Authorize Application * `source_linked` - Source Linked * `impersonation_started` - Impersonation Started * `impersonation_ended` - Impersonation Ended * `flow_execution` - Flow Execution * `policy_execution` - Policy Execution * `policy_exception` - Policy Exception * `property_mapping_exception` - Property Mapping Exception * `system_task_execution` - System Task Execution * `system_task_exception` - System Task Exception * `system_exception` - System Exception * `configuration_error` - Configuration Error * `model_created` - Model Created * `model_updated` - Model Updated * `model_deleted` - Model Deleted * `email_sent` - Email Sent * `update_available` - Update Available * `custom_` - Custom Prefix")] = None, app : Optional[StrictStr] = None, client_ip : Optional[StrictStr] = None, created : Optional[datetime] = None, execution_logging : Optional[StrictBool] = None, last_updated : Optional[datetime] = None, model : Optional[StrictStr] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy_uuid : Optional[StrictStr] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_event_matcher_list  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_list_with_http_info(action, app, client_ip, created, execution_logging, last_updated, model, name, ordering, page, page_size, policy_uuid, search, async_req=True)
        >>> result = thread.get()

        :param action: Match created events with this action type. When left empty, all action types will be matched.  * `login` - Login * `login_failed` - Login Failed * `logout` - Logout * `user_write` - User Write * `suspicious_request` - Suspicious Request * `password_set` - Password Set * `secret_view` - Secret View * `secret_rotate` - Secret Rotate * `invitation_used` - Invite Used * `authorize_application` - Authorize Application * `source_linked` - Source Linked * `impersonation_started` - Impersonation Started * `impersonation_ended` - Impersonation Ended * `flow_execution` - Flow Execution * `policy_execution` - Policy Execution * `policy_exception` - Policy Exception * `property_mapping_exception` - Property Mapping Exception * `system_task_execution` - System Task Execution * `system_task_exception` - System Task Exception * `system_exception` - System Exception * `configuration_error` - Configuration Error * `model_created` - Model Created * `model_updated` - Model Updated * `model_deleted` - Model Deleted * `email_sent` - Email Sent * `update_available` - Update Available * `custom_` - Custom Prefix
        :type action: str
        :param app:
        :type app: str
        :param client_ip:
        :type client_ip: str
        :param created:
        :type created: datetime
        :param execution_logging:
        :type execution_logging: bool
        :param last_updated:
        :type last_updated: datetime
        :param model:
        :type model: str
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy_uuid:
        :type policy_uuid: str
        :param search: A search term.
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedEventMatcherPolicyList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'action',
            'app',
            'client_ip',
            'created',
            'execution_logging',
            'last_updated',
            'model',
            'name',
            'ordering',
            'page',
            'page_size',
            'policy_uuid',
            'search'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_event_matcher_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('action') is not None:  # noqa: E501
            _query_params.append(('action', _params['action']))

        if _params.get('app') is not None:  # noqa: E501
            _query_params.append(('app', _params['app']))

        if _params.get('client_ip') is not None:  # noqa: E501
            _query_params.append(('client_ip', _params['client_ip']))

        if _params.get('created') is not None:  # noqa: E501
            if isinstance(_params['created'], datetime):
                _query_params.append(('created', _params['created'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created', _params['created']))

        if _params.get('execution_logging') is not None:  # noqa: E501
            _query_params.append(('execution_logging', _params['execution_logging']))

        if _params.get('last_updated') is not None:  # noqa: E501
            if isinstance(_params['last_updated'], datetime):
                _query_params.append(('last_updated', _params['last_updated'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('last_updated', _params['last_updated']))

        if _params.get('model') is not None:  # noqa: E501
            _query_params.append(('model', _params['model']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('policy_uuid') is not None:  # noqa: E501
            _query_params.append(('policy_uuid', _params['policy_uuid']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedEventMatcherPolicyList",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/event_matcher/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_event_matcher_partial_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Event Matcher Policy.")], patched_event_matcher_policy_request : Optional[PatchedEventMatcherPolicyRequest] = None, **kwargs) -> EventMatcherPolicy:  # noqa: E501
        """policies_event_matcher_partial_update  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_partial_update(policy_uuid, patched_event_matcher_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Event Matcher Policy. (required)
        :type policy_uuid: str
        :param patched_event_matcher_policy_request:
        :type patched_event_matcher_policy_request: PatchedEventMatcherPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EventMatcherPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_event_matcher_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_event_matcher_partial_update_with_http_info(policy_uuid, patched_event_matcher_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_event_matcher_partial_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Event Matcher Policy.")], patched_event_matcher_policy_request : Optional[PatchedEventMatcherPolicyRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_event_matcher_partial_update  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_partial_update_with_http_info(policy_uuid, patched_event_matcher_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Event Matcher Policy. (required)
        :type policy_uuid: str
        :param patched_event_matcher_policy_request:
        :type patched_event_matcher_policy_request: PatchedEventMatcherPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EventMatcherPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'patched_event_matcher_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_event_matcher_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_event_matcher_policy_request'] is not None:
            _body_params = _params['patched_event_matcher_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "EventMatcherPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/event_matcher/{policy_uuid}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_event_matcher_retrieve(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Event Matcher Policy.")], **kwargs) -> EventMatcherPolicy:  # noqa: E501
        """policies_event_matcher_retrieve  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_retrieve(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Event Matcher Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EventMatcherPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_event_matcher_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_event_matcher_retrieve_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_event_matcher_retrieve_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Event Matcher Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_event_matcher_retrieve  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_retrieve_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Event Matcher Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EventMatcherPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_event_matcher_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "EventMatcherPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/event_matcher/{policy_uuid}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_event_matcher_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Event Matcher Policy.")], event_matcher_policy_request : EventMatcherPolicyRequest, **kwargs) -> EventMatcherPolicy:  # noqa: E501
        """policies_event_matcher_update  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_update(policy_uuid, event_matcher_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Event Matcher Policy. (required)
        :type policy_uuid: str
        :param event_matcher_policy_request: (required)
        :type event_matcher_policy_request: EventMatcherPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EventMatcherPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_event_matcher_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_event_matcher_update_with_http_info(policy_uuid, event_matcher_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_event_matcher_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Event Matcher Policy.")], event_matcher_policy_request : EventMatcherPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_event_matcher_update  # noqa: E501

        Event Matcher Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_update_with_http_info(policy_uuid, event_matcher_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Event Matcher Policy. (required)
        :type policy_uuid: str
        :param event_matcher_policy_request: (required)
        :type event_matcher_policy_request: EventMatcherPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EventMatcherPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'event_matcher_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_event_matcher_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['event_matcher_policy_request'] is not None:
            _body_params = _params['event_matcher_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "EventMatcherPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/event_matcher/{policy_uuid}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_event_matcher_used_by_list(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Event Matcher Policy.")], **kwargs) -> List[UsedBy]:  # noqa: E501
        """policies_event_matcher_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_used_by_list(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Event Matcher Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[UsedBy]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_event_matcher_used_by_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_event_matcher_used_by_list_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_event_matcher_used_by_list_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Event Matcher Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_event_matcher_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_event_matcher_used_by_list_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Event Matcher Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[UsedBy], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_event_matcher_used_by_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "List[UsedBy]",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/event_matcher/{policy_uuid}/used_by/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_expression_create(self, expression_policy_request : ExpressionPolicyRequest, **kwargs) -> ExpressionPolicy:  # noqa: E501
        """policies_expression_create  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_create(expression_policy_request, async_req=True)
        >>> result = thread.get()

        :param expression_policy_request: (required)
        :type expression_policy_request: ExpressionPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExpressionPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_expression_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_expression_create_with_http_info(expression_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_expression_create_with_http_info(self, expression_policy_request : ExpressionPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_expression_create  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_create_with_http_info(expression_policy_request, async_req=True)
        >>> result = thread.get()

        :param expression_policy_request: (required)
        :type expression_policy_request: ExpressionPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExpressionPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'expression_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_expression_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['expression_policy_request'] is not None:
            _body_params = _params['expression_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '201': "ExpressionPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/expression/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_expression_destroy(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Expression Policy.")], **kwargs) -> None:  # noqa: E501
        """policies_expression_destroy  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_destroy(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Expression Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_expression_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_expression_destroy_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_expression_destroy_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Expression Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_expression_destroy  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_destroy_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Expression Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_expression_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/policies/expression/{policy_uuid}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_expression_list(self, created : Optional[datetime] = None, execution_logging : Optional[StrictBool] = None, expression : Optional[StrictStr] = None, last_updated : Optional[datetime] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy_uuid : Optional[StrictStr] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, **kwargs) -> PaginatedExpressionPolicyList:  # noqa: E501
        """policies_expression_list  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_list(created, execution_logging, expression, last_updated, name, ordering, page, page_size, policy_uuid, search, async_req=True)
        >>> result = thread.get()

        :param created:
        :type created: datetime
        :param execution_logging:
        :type execution_logging: bool
        :param expression:
        :type expression: str
        :param last_updated:
        :type last_updated: datetime
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy_uuid:
        :type policy_uuid: str
        :param search: A search term.
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedExpressionPolicyList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_expression_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_expression_list_with_http_info(created, execution_logging, expression, last_updated, name, ordering, page, page_size, policy_uuid, search, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_expression_list_with_http_info(self, created : Optional[datetime] = None, execution_logging : Optional[StrictBool] = None, expression : Optional[StrictStr] = None, last_updated : Optional[datetime] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy_uuid : Optional[StrictStr] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_expression_list  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_list_with_http_info(created, execution_logging, expression, last_updated, name, ordering, page, page_size, policy_uuid, search, async_req=True)
        >>> result = thread.get()

        :param created:
        :type created: datetime
        :param execution_logging:
        :type execution_logging: bool
        :param expression:
        :type expression: str
        :param last_updated:
        :type last_updated: datetime
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy_uuid:
        :type policy_uuid: str
        :param search: A search term.
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedExpressionPolicyList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'created',
            'execution_logging',
            'expression',
            'last_updated',
            'name',
            'ordering',
            'page',
            'page_size',
            'policy_uuid',
            'search'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_expression_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('created') is not None:  # noqa: E501
            if isinstance(_params['created'], datetime):
                _query_params.append(('created', _params['created'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created', _params['created']))

        if _params.get('execution_logging') is not None:  # noqa: E501
            _query_params.append(('execution_logging', _params['execution_logging']))

        if _params.get('expression') is not None:  # noqa: E501
            _query_params.append(('expression', _params['expression']))

        if _params.get('last_updated') is not None:  # noqa: E501
            if isinstance(_params['last_updated'], datetime):
                _query_params.append(('last_updated', _params['last_updated'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('last_updated', _params['last_updated']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('policy_uuid') is not None:  # noqa: E501
            _query_params.append(('policy_uuid', _params['policy_uuid']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedExpressionPolicyList",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/expression/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_expression_partial_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Expression Policy.")], patched_expression_policy_request : Optional[PatchedExpressionPolicyRequest] = None, **kwargs) -> ExpressionPolicy:  # noqa: E501
        """policies_expression_partial_update  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_partial_update(policy_uuid, patched_expression_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Expression Policy. (required)
        :type policy_uuid: str
        :param patched_expression_policy_request:
        :type patched_expression_policy_request: PatchedExpressionPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExpressionPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_expression_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_expression_partial_update_with_http_info(policy_uuid, patched_expression_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_expression_partial_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Expression Policy.")], patched_expression_policy_request : Optional[PatchedExpressionPolicyRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_expression_partial_update  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_partial_update_with_http_info(policy_uuid, patched_expression_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Expression Policy. (required)
        :type policy_uuid: str
        :param patched_expression_policy_request:
        :type patched_expression_policy_request: PatchedExpressionPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExpressionPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'patched_expression_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_expression_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_expression_policy_request'] is not None:
            _body_params = _params['patched_expression_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "ExpressionPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/expression/{policy_uuid}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_expression_retrieve(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Expression Policy.")], **kwargs) -> ExpressionPolicy:  # noqa: E501
        """policies_expression_retrieve  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_retrieve(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Expression Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExpressionPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_expression_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_expression_retrieve_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_expression_retrieve_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Expression Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_expression_retrieve  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_retrieve_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Expression Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExpressionPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_expression_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "ExpressionPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/expression/{policy_uuid}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_expression_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Expression Policy.")], expression_policy_request : ExpressionPolicyRequest, **kwargs) -> ExpressionPolicy:  # noqa: E501
        """policies_expression_update  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_update(policy_uuid, expression_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Expression Policy. (required)
        :type policy_uuid: str
        :param expression_policy_request: (required)
        :type expression_policy_request: ExpressionPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExpressionPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_expression_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_expression_update_with_http_info(policy_uuid, expression_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_expression_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Expression Policy.")], expression_policy_request : ExpressionPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_expression_update  # noqa: E501

        Source Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_update_with_http_info(policy_uuid, expression_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Expression Policy. (required)
        :type policy_uuid: str
        :param expression_policy_request: (required)
        :type expression_policy_request: ExpressionPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExpressionPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'expression_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_expression_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['expression_policy_request'] is not None:
            _body_params = _params['expression_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "ExpressionPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/expression/{policy_uuid}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_expression_used_by_list(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Expression Policy.")], **kwargs) -> List[UsedBy]:  # noqa: E501
        """policies_expression_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_used_by_list(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Expression Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[UsedBy]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_expression_used_by_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_expression_used_by_list_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_expression_used_by_list_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Expression Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_expression_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_expression_used_by_list_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Expression Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[UsedBy], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_expression_used_by_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "List[UsedBy]",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/expression/{policy_uuid}/used_by/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_create(self, password_policy_request : PasswordPolicyRequest, **kwargs) -> PasswordPolicy:  # noqa: E501
        """policies_password_create  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_create(password_policy_request, async_req=True)
        >>> result = thread.get()

        :param password_policy_request: (required)
        :type password_policy_request: PasswordPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PasswordPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_create_with_http_info(password_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_create_with_http_info(self, password_policy_request : PasswordPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_create  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_create_with_http_info(password_policy_request, async_req=True)
        >>> result = thread.get()

        :param password_policy_request: (required)
        :type password_policy_request: PasswordPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PasswordPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'password_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['password_policy_request'] is not None:
            _body_params = _params['password_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '201': "PasswordPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_destroy(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Policy.")], **kwargs) -> None:  # noqa: E501
        """policies_password_destroy  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_destroy(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_destroy_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_destroy_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_destroy  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_destroy_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/policies/password/{policy_uuid}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_expiry_create(self, password_expiry_policy_request : PasswordExpiryPolicyRequest, **kwargs) -> PasswordExpiryPolicy:  # noqa: E501
        """policies_password_expiry_create  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_create(password_expiry_policy_request, async_req=True)
        >>> result = thread.get()

        :param password_expiry_policy_request: (required)
        :type password_expiry_policy_request: PasswordExpiryPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PasswordExpiryPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_expiry_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_expiry_create_with_http_info(password_expiry_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_expiry_create_with_http_info(self, password_expiry_policy_request : PasswordExpiryPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_expiry_create  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_create_with_http_info(password_expiry_policy_request, async_req=True)
        >>> result = thread.get()

        :param password_expiry_policy_request: (required)
        :type password_expiry_policy_request: PasswordExpiryPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PasswordExpiryPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'password_expiry_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_expiry_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['password_expiry_policy_request'] is not None:
            _body_params = _params['password_expiry_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '201': "PasswordExpiryPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password_expiry/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_expiry_destroy(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Expiry Policy.")], **kwargs) -> None:  # noqa: E501
        """policies_password_expiry_destroy  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_destroy(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Expiry Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_expiry_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_expiry_destroy_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_expiry_destroy_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Expiry Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_expiry_destroy  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_destroy_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Expiry Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_expiry_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/policies/password_expiry/{policy_uuid}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_expiry_list(self, created : Optional[datetime] = None, days : Optional[StrictInt] = None, deny_only : Optional[StrictBool] = None, execution_logging : Optional[StrictBool] = None, last_updated : Optional[datetime] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy_uuid : Optional[StrictStr] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, **kwargs) -> PaginatedPasswordExpiryPolicyList:  # noqa: E501
        """policies_password_expiry_list  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_list(created, days, deny_only, execution_logging, last_updated, name, ordering, page, page_size, policy_uuid, search, async_req=True)
        >>> result = thread.get()

        :param created:
        :type created: datetime
        :param days:
        :type days: int
        :param deny_only:
        :type deny_only: bool
        :param execution_logging:
        :type execution_logging: bool
        :param last_updated:
        :type last_updated: datetime
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy_uuid:
        :type policy_uuid: str
        :param search: A search term.
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedPasswordExpiryPolicyList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_expiry_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_expiry_list_with_http_info(created, days, deny_only, execution_logging, last_updated, name, ordering, page, page_size, policy_uuid, search, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_expiry_list_with_http_info(self, created : Optional[datetime] = None, days : Optional[StrictInt] = None, deny_only : Optional[StrictBool] = None, execution_logging : Optional[StrictBool] = None, last_updated : Optional[datetime] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy_uuid : Optional[StrictStr] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_expiry_list  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_list_with_http_info(created, days, deny_only, execution_logging, last_updated, name, ordering, page, page_size, policy_uuid, search, async_req=True)
        >>> result = thread.get()

        :param created:
        :type created: datetime
        :param days:
        :type days: int
        :param deny_only:
        :type deny_only: bool
        :param execution_logging:
        :type execution_logging: bool
        :param last_updated:
        :type last_updated: datetime
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy_uuid:
        :type policy_uuid: str
        :param search: A search term.
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedPasswordExpiryPolicyList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'created',
            'days',
            'deny_only',
            'execution_logging',
            'last_updated',
            'name',
            'ordering',
            'page',
            'page_size',
            'policy_uuid',
            'search'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_expiry_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('created') is not None:  # noqa: E501
            if isinstance(_params['created'], datetime):
                _query_params.append(('created', _params['created'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created', _params['created']))

        if _params.get('days') is not None:  # noqa: E501
            _query_params.append(('days', _params['days']))

        if _params.get('deny_only') is not None:  # noqa: E501
            _query_params.append(('deny_only', _params['deny_only']))

        if _params.get('execution_logging') is not None:  # noqa: E501
            _query_params.append(('execution_logging', _params['execution_logging']))

        if _params.get('last_updated') is not None:  # noqa: E501
            if isinstance(_params['last_updated'], datetime):
                _query_params.append(('last_updated', _params['last_updated'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('last_updated', _params['last_updated']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('policy_uuid') is not None:  # noqa: E501
            _query_params.append(('policy_uuid', _params['policy_uuid']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedPasswordExpiryPolicyList",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password_expiry/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_expiry_partial_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Expiry Policy.")], patched_password_expiry_policy_request : Optional[PatchedPasswordExpiryPolicyRequest] = None, **kwargs) -> PasswordExpiryPolicy:  # noqa: E501
        """policies_password_expiry_partial_update  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_partial_update(policy_uuid, patched_password_expiry_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Expiry Policy. (required)
        :type policy_uuid: str
        :param patched_password_expiry_policy_request:
        :type patched_password_expiry_policy_request: PatchedPasswordExpiryPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PasswordExpiryPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_expiry_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_expiry_partial_update_with_http_info(policy_uuid, patched_password_expiry_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_expiry_partial_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Expiry Policy.")], patched_password_expiry_policy_request : Optional[PatchedPasswordExpiryPolicyRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_expiry_partial_update  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_partial_update_with_http_info(policy_uuid, patched_password_expiry_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Expiry Policy. (required)
        :type policy_uuid: str
        :param patched_password_expiry_policy_request:
        :type patched_password_expiry_policy_request: PatchedPasswordExpiryPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PasswordExpiryPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'patched_password_expiry_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_expiry_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_password_expiry_policy_request'] is not None:
            _body_params = _params['patched_password_expiry_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PasswordExpiryPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password_expiry/{policy_uuid}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_expiry_retrieve(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Expiry Policy.")], **kwargs) -> PasswordExpiryPolicy:  # noqa: E501
        """policies_password_expiry_retrieve  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_retrieve(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Expiry Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PasswordExpiryPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_expiry_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_expiry_retrieve_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_expiry_retrieve_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Expiry Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_expiry_retrieve  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_retrieve_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Expiry Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PasswordExpiryPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_expiry_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PasswordExpiryPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password_expiry/{policy_uuid}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_expiry_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Expiry Policy.")], password_expiry_policy_request : PasswordExpiryPolicyRequest, **kwargs) -> PasswordExpiryPolicy:  # noqa: E501
        """policies_password_expiry_update  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_update(policy_uuid, password_expiry_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Expiry Policy. (required)
        :type policy_uuid: str
        :param password_expiry_policy_request: (required)
        :type password_expiry_policy_request: PasswordExpiryPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PasswordExpiryPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_expiry_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_expiry_update_with_http_info(policy_uuid, password_expiry_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_expiry_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Expiry Policy.")], password_expiry_policy_request : PasswordExpiryPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_expiry_update  # noqa: E501

        Password Expiry Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_update_with_http_info(policy_uuid, password_expiry_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Expiry Policy. (required)
        :type policy_uuid: str
        :param password_expiry_policy_request: (required)
        :type password_expiry_policy_request: PasswordExpiryPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PasswordExpiryPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'password_expiry_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_expiry_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['password_expiry_policy_request'] is not None:
            _body_params = _params['password_expiry_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PasswordExpiryPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password_expiry/{policy_uuid}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_expiry_used_by_list(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Expiry Policy.")], **kwargs) -> List[UsedBy]:  # noqa: E501
        """policies_password_expiry_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_used_by_list(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Expiry Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[UsedBy]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_expiry_used_by_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_expiry_used_by_list_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_expiry_used_by_list_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Expiry Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_expiry_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_expiry_used_by_list_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Expiry Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[UsedBy], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_expiry_used_by_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "List[UsedBy]",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password_expiry/{policy_uuid}/used_by/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_list(self, amount_digits : Optional[StrictInt] = None, amount_lowercase : Optional[StrictInt] = None, amount_symbols : Optional[StrictInt] = None, amount_uppercase : Optional[StrictInt] = None, check_have_i_been_pwned : Optional[StrictBool] = None, check_static_rules : Optional[StrictBool] = None, check_zxcvbn : Optional[StrictBool] = None, created : Optional[datetime] = None, error_message : Optional[StrictStr] = None, execution_logging : Optional[StrictBool] = None, hibp_allowed_count : Optional[StrictInt] = None, last_updated : Optional[datetime] = None, length_min : Optional[StrictInt] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, password_field : Optional[StrictStr] = None, policy_uuid : Optional[StrictStr] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, symbol_charset : Optional[StrictStr] = None, zxcvbn_score_threshold : Optional[StrictInt] = None, **kwargs) -> PaginatedPasswordPolicyList:  # noqa: E501
        """policies_password_list  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_list(amount_digits, amount_lowercase, amount_symbols, amount_uppercase, check_have_i_been_pwned, check_static_rules, check_zxcvbn, created, error_message, execution_logging, hibp_allowed_count, last_updated, length_min, name, ordering, page, page_size, password_field, policy_uuid, search, symbol_charset, zxcvbn_score_threshold, async_req=True)
        >>> result = thread.get()

        :param amount_digits:
        :type amount_digits: int
        :param amount_lowercase:
        :type amount_lowercase: int
        :param amount_symbols:
        :type amount_symbols: int
        :param amount_uppercase:
        :type amount_uppercase: int
        :param check_have_i_been_pwned:
        :type check_have_i_been_pwned: bool
        :param check_static_rules:
        :type check_static_rules: bool
        :param check_zxcvbn:
        :type check_zxcvbn: bool
        :param created:
        :type created: datetime
        :param error_message:
        :type error_message: str
        :param execution_logging:
        :type execution_logging: bool
        :param hibp_allowed_count:
        :type hibp_allowed_count: int
        :param last_updated:
        :type last_updated: datetime
        :param length_min:
        :type length_min: int
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param password_field:
        :type password_field: str
        :param policy_uuid:
        :type policy_uuid: str
        :param search: A search term.
        :type search: str
        :param symbol_charset:
        :type symbol_charset: str
        :param zxcvbn_score_threshold:
        :type zxcvbn_score_threshold: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedPasswordPolicyList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_list_with_http_info(amount_digits, amount_lowercase, amount_symbols, amount_uppercase, check_have_i_been_pwned, check_static_rules, check_zxcvbn, created, error_message, execution_logging, hibp_allowed_count, last_updated, length_min, name, ordering, page, page_size, password_field, policy_uuid, search, symbol_charset, zxcvbn_score_threshold, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_list_with_http_info(self, amount_digits : Optional[StrictInt] = None, amount_lowercase : Optional[StrictInt] = None, amount_symbols : Optional[StrictInt] = None, amount_uppercase : Optional[StrictInt] = None, check_have_i_been_pwned : Optional[StrictBool] = None, check_static_rules : Optional[StrictBool] = None, check_zxcvbn : Optional[StrictBool] = None, created : Optional[datetime] = None, error_message : Optional[StrictStr] = None, execution_logging : Optional[StrictBool] = None, hibp_allowed_count : Optional[StrictInt] = None, last_updated : Optional[datetime] = None, length_min : Optional[StrictInt] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, password_field : Optional[StrictStr] = None, policy_uuid : Optional[StrictStr] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, symbol_charset : Optional[StrictStr] = None, zxcvbn_score_threshold : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_list  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_list_with_http_info(amount_digits, amount_lowercase, amount_symbols, amount_uppercase, check_have_i_been_pwned, check_static_rules, check_zxcvbn, created, error_message, execution_logging, hibp_allowed_count, last_updated, length_min, name, ordering, page, page_size, password_field, policy_uuid, search, symbol_charset, zxcvbn_score_threshold, async_req=True)
        >>> result = thread.get()

        :param amount_digits:
        :type amount_digits: int
        :param amount_lowercase:
        :type amount_lowercase: int
        :param amount_symbols:
        :type amount_symbols: int
        :param amount_uppercase:
        :type amount_uppercase: int
        :param check_have_i_been_pwned:
        :type check_have_i_been_pwned: bool
        :param check_static_rules:
        :type check_static_rules: bool
        :param check_zxcvbn:
        :type check_zxcvbn: bool
        :param created:
        :type created: datetime
        :param error_message:
        :type error_message: str
        :param execution_logging:
        :type execution_logging: bool
        :param hibp_allowed_count:
        :type hibp_allowed_count: int
        :param last_updated:
        :type last_updated: datetime
        :param length_min:
        :type length_min: int
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param password_field:
        :type password_field: str
        :param policy_uuid:
        :type policy_uuid: str
        :param search: A search term.
        :type search: str
        :param symbol_charset:
        :type symbol_charset: str
        :param zxcvbn_score_threshold:
        :type zxcvbn_score_threshold: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedPasswordPolicyList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'amount_digits',
            'amount_lowercase',
            'amount_symbols',
            'amount_uppercase',
            'check_have_i_been_pwned',
            'check_static_rules',
            'check_zxcvbn',
            'created',
            'error_message',
            'execution_logging',
            'hibp_allowed_count',
            'last_updated',
            'length_min',
            'name',
            'ordering',
            'page',
            'page_size',
            'password_field',
            'policy_uuid',
            'search',
            'symbol_charset',
            'zxcvbn_score_threshold'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('amount_digits') is not None:  # noqa: E501
            _query_params.append(('amount_digits', _params['amount_digits']))

        if _params.get('amount_lowercase') is not None:  # noqa: E501
            _query_params.append(('amount_lowercase', _params['amount_lowercase']))

        if _params.get('amount_symbols') is not None:  # noqa: E501
            _query_params.append(('amount_symbols', _params['amount_symbols']))

        if _params.get('amount_uppercase') is not None:  # noqa: E501
            _query_params.append(('amount_uppercase', _params['amount_uppercase']))

        if _params.get('check_have_i_been_pwned') is not None:  # noqa: E501
            _query_params.append(('check_have_i_been_pwned', _params['check_have_i_been_pwned']))

        if _params.get('check_static_rules') is not None:  # noqa: E501
            _query_params.append(('check_static_rules', _params['check_static_rules']))

        if _params.get('check_zxcvbn') is not None:  # noqa: E501
            _query_params.append(('check_zxcvbn', _params['check_zxcvbn']))

        if _params.get('created') is not None:  # noqa: E501
            if isinstance(_params['created'], datetime):
                _query_params.append(('created', _params['created'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created', _params['created']))

        if _params.get('error_message') is not None:  # noqa: E501
            _query_params.append(('error_message', _params['error_message']))

        if _params.get('execution_logging') is not None:  # noqa: E501
            _query_params.append(('execution_logging', _params['execution_logging']))

        if _params.get('hibp_allowed_count') is not None:  # noqa: E501
            _query_params.append(('hibp_allowed_count', _params['hibp_allowed_count']))

        if _params.get('last_updated') is not None:  # noqa: E501
            if isinstance(_params['last_updated'], datetime):
                _query_params.append(('last_updated', _params['last_updated'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('last_updated', _params['last_updated']))

        if _params.get('length_min') is not None:  # noqa: E501
            _query_params.append(('length_min', _params['length_min']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('password_field') is not None:  # noqa: E501
            _query_params.append(('password_field', _params['password_field']))

        if _params.get('policy_uuid') is not None:  # noqa: E501
            _query_params.append(('policy_uuid', _params['policy_uuid']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('symbol_charset') is not None:  # noqa: E501
            _query_params.append(('symbol_charset', _params['symbol_charset']))

        if _params.get('zxcvbn_score_threshold') is not None:  # noqa: E501
            _query_params.append(('zxcvbn_score_threshold', _params['zxcvbn_score_threshold']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedPasswordPolicyList",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_partial_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Policy.")], patched_password_policy_request : Optional[PatchedPasswordPolicyRequest] = None, **kwargs) -> PasswordPolicy:  # noqa: E501
        """policies_password_partial_update  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_partial_update(policy_uuid, patched_password_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Policy. (required)
        :type policy_uuid: str
        :param patched_password_policy_request:
        :type patched_password_policy_request: PatchedPasswordPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PasswordPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_partial_update_with_http_info(policy_uuid, patched_password_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_partial_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Policy.")], patched_password_policy_request : Optional[PatchedPasswordPolicyRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_partial_update  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_partial_update_with_http_info(policy_uuid, patched_password_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Policy. (required)
        :type policy_uuid: str
        :param patched_password_policy_request:
        :type patched_password_policy_request: PatchedPasswordPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PasswordPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'patched_password_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_password_policy_request'] is not None:
            _body_params = _params['patched_password_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PasswordPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password/{policy_uuid}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_retrieve(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Policy.")], **kwargs) -> PasswordPolicy:  # noqa: E501
        """policies_password_retrieve  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_retrieve(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PasswordPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_retrieve_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_retrieve_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_retrieve  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_retrieve_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PasswordPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PasswordPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password/{policy_uuid}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Policy.")], password_policy_request : PasswordPolicyRequest, **kwargs) -> PasswordPolicy:  # noqa: E501
        """policies_password_update  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_update(policy_uuid, password_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Policy. (required)
        :type policy_uuid: str
        :param password_policy_request: (required)
        :type password_policy_request: PasswordPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PasswordPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_update_with_http_info(policy_uuid, password_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Policy.")], password_policy_request : PasswordPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_update  # noqa: E501

        Password Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_update_with_http_info(policy_uuid, password_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Policy. (required)
        :type policy_uuid: str
        :param password_policy_request: (required)
        :type password_policy_request: PasswordPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PasswordPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'password_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['password_policy_request'] is not None:
            _body_params = _params['password_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PasswordPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password/{policy_uuid}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_password_used_by_list(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Policy.")], **kwargs) -> List[UsedBy]:  # noqa: E501
        """policies_password_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_used_by_list(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[UsedBy]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_password_used_by_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_password_used_by_list_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_password_used_by_list_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Password Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_password_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_password_used_by_list_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Password Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[UsedBy], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_password_used_by_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "List[UsedBy]",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/password/{policy_uuid}/used_by/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_create(self, reputation_policy_request : ReputationPolicyRequest, **kwargs) -> ReputationPolicy:  # noqa: E501
        """policies_reputation_create  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_create(reputation_policy_request, async_req=True)
        >>> result = thread.get()

        :param reputation_policy_request: (required)
        :type reputation_policy_request: ReputationPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReputationPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_create_with_http_info(reputation_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_create_with_http_info(self, reputation_policy_request : ReputationPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_create  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_create_with_http_info(reputation_policy_request, async_req=True)
        >>> result = thread.get()

        :param reputation_policy_request: (required)
        :type reputation_policy_request: ReputationPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReputationPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reputation_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['reputation_policy_request'] is not None:
            _body_params = _params['reputation_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '201': "ReputationPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/reputation/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_destroy(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Reputation Policy.")], **kwargs) -> None:  # noqa: E501
        """policies_reputation_destroy  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_destroy(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Reputation Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_destroy_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_destroy_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Reputation Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_destroy  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_destroy_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Reputation Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/policies/reputation/{policy_uuid}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_list(self, check_ip : Optional[StrictBool] = None, check_username : Optional[StrictBool] = None, created : Optional[datetime] = None, execution_logging : Optional[StrictBool] = None, last_updated : Optional[datetime] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy_uuid : Optional[StrictStr] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, threshold : Optional[StrictInt] = None, **kwargs) -> PaginatedReputationPolicyList:  # noqa: E501
        """policies_reputation_list  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_list(check_ip, check_username, created, execution_logging, last_updated, name, ordering, page, page_size, policy_uuid, search, threshold, async_req=True)
        >>> result = thread.get()

        :param check_ip:
        :type check_ip: bool
        :param check_username:
        :type check_username: bool
        :param created:
        :type created: datetime
        :param execution_logging:
        :type execution_logging: bool
        :param last_updated:
        :type last_updated: datetime
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy_uuid:
        :type policy_uuid: str
        :param search: A search term.
        :type search: str
        :param threshold:
        :type threshold: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedReputationPolicyList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_list_with_http_info(check_ip, check_username, created, execution_logging, last_updated, name, ordering, page, page_size, policy_uuid, search, threshold, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_list_with_http_info(self, check_ip : Optional[StrictBool] = None, check_username : Optional[StrictBool] = None, created : Optional[datetime] = None, execution_logging : Optional[StrictBool] = None, last_updated : Optional[datetime] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, policy_uuid : Optional[StrictStr] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, threshold : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_list  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_list_with_http_info(check_ip, check_username, created, execution_logging, last_updated, name, ordering, page, page_size, policy_uuid, search, threshold, async_req=True)
        >>> result = thread.get()

        :param check_ip:
        :type check_ip: bool
        :param check_username:
        :type check_username: bool
        :param created:
        :type created: datetime
        :param execution_logging:
        :type execution_logging: bool
        :param last_updated:
        :type last_updated: datetime
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param policy_uuid:
        :type policy_uuid: str
        :param search: A search term.
        :type search: str
        :param threshold:
        :type threshold: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedReputationPolicyList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'check_ip',
            'check_username',
            'created',
            'execution_logging',
            'last_updated',
            'name',
            'ordering',
            'page',
            'page_size',
            'policy_uuid',
            'search',
            'threshold'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('check_ip') is not None:  # noqa: E501
            _query_params.append(('check_ip', _params['check_ip']))

        if _params.get('check_username') is not None:  # noqa: E501
            _query_params.append(('check_username', _params['check_username']))

        if _params.get('created') is not None:  # noqa: E501
            if isinstance(_params['created'], datetime):
                _query_params.append(('created', _params['created'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created', _params['created']))

        if _params.get('execution_logging') is not None:  # noqa: E501
            _query_params.append(('execution_logging', _params['execution_logging']))

        if _params.get('last_updated') is not None:  # noqa: E501
            if isinstance(_params['last_updated'], datetime):
                _query_params.append(('last_updated', _params['last_updated'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('last_updated', _params['last_updated']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('policy_uuid') is not None:  # noqa: E501
            _query_params.append(('policy_uuid', _params['policy_uuid']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('threshold') is not None:  # noqa: E501
            _query_params.append(('threshold', _params['threshold']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedReputationPolicyList",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/reputation/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_partial_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Reputation Policy.")], patched_reputation_policy_request : Optional[PatchedReputationPolicyRequest] = None, **kwargs) -> ReputationPolicy:  # noqa: E501
        """policies_reputation_partial_update  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_partial_update(policy_uuid, patched_reputation_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Reputation Policy. (required)
        :type policy_uuid: str
        :param patched_reputation_policy_request:
        :type patched_reputation_policy_request: PatchedReputationPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReputationPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_partial_update_with_http_info(policy_uuid, patched_reputation_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_partial_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Reputation Policy.")], patched_reputation_policy_request : Optional[PatchedReputationPolicyRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_partial_update  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_partial_update_with_http_info(policy_uuid, patched_reputation_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Reputation Policy. (required)
        :type policy_uuid: str
        :param patched_reputation_policy_request:
        :type patched_reputation_policy_request: PatchedReputationPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReputationPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'patched_reputation_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_reputation_policy_request'] is not None:
            _body_params = _params['patched_reputation_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "ReputationPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/reputation/{policy_uuid}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_retrieve(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Reputation Policy.")], **kwargs) -> ReputationPolicy:  # noqa: E501
        """policies_reputation_retrieve  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_retrieve(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Reputation Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReputationPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_retrieve_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_retrieve_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Reputation Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_retrieve  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_retrieve_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Reputation Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReputationPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "ReputationPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/reputation/{policy_uuid}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_scores_destroy(self, reputation_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this reputation.")], **kwargs) -> None:  # noqa: E501
        """policies_reputation_scores_destroy  # noqa: E501

        Reputation Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_scores_destroy(reputation_uuid, async_req=True)
        >>> result = thread.get()

        :param reputation_uuid: A UUID string identifying this reputation. (required)
        :type reputation_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_scores_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_scores_destroy_with_http_info(reputation_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_scores_destroy_with_http_info(self, reputation_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this reputation.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_scores_destroy  # noqa: E501

        Reputation Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_scores_destroy_with_http_info(reputation_uuid, async_req=True)
        >>> result = thread.get()

        :param reputation_uuid: A UUID string identifying this reputation. (required)
        :type reputation_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'reputation_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_scores_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reputation_uuid']:
            _path_params['reputation_uuid'] = _params['reputation_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/policies/reputation/scores/{reputation_uuid}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_scores_list(self, identifier : Optional[StrictStr] = None, ip : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, score : Optional[StrictInt] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, **kwargs) -> PaginatedReputationList:  # noqa: E501
        """policies_reputation_scores_list  # noqa: E501

        Reputation Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_scores_list(identifier, ip, ordering, page, page_size, score, search, async_req=True)
        >>> result = thread.get()

        :param identifier:
        :type identifier: str
        :param ip:
        :type ip: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param score:
        :type score: int
        :param search: A search term.
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedReputationList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_scores_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_scores_list_with_http_info(identifier, ip, ordering, page, page_size, score, search, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_scores_list_with_http_info(self, identifier : Optional[StrictStr] = None, ip : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, score : Optional[StrictInt] = None, search : Annotated[Optional[StrictStr], Field(description="A search term.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_scores_list  # noqa: E501

        Reputation Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_scores_list_with_http_info(identifier, ip, ordering, page, page_size, score, search, async_req=True)
        >>> result = thread.get()

        :param identifier:
        :type identifier: str
        :param ip:
        :type ip: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param score:
        :type score: int
        :param search: A search term.
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedReputationList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'identifier',
            'ip',
            'ordering',
            'page',
            'page_size',
            'score',
            'search'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_scores_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('identifier') is not None:  # noqa: E501
            _query_params.append(('identifier', _params['identifier']))

        if _params.get('ip') is not None:  # noqa: E501
            _query_params.append(('ip', _params['ip']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('score') is not None:  # noqa: E501
            _query_params.append(('score', _params['score']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedReputationList",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/reputation/scores/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_scores_retrieve(self, reputation_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this reputation.")], **kwargs) -> Reputation:  # noqa: E501
        """policies_reputation_scores_retrieve  # noqa: E501

        Reputation Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_scores_retrieve(reputation_uuid, async_req=True)
        >>> result = thread.get()

        :param reputation_uuid: A UUID string identifying this reputation. (required)
        :type reputation_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Reputation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_scores_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_scores_retrieve_with_http_info(reputation_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_scores_retrieve_with_http_info(self, reputation_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this reputation.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_scores_retrieve  # noqa: E501

        Reputation Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_scores_retrieve_with_http_info(reputation_uuid, async_req=True)
        >>> result = thread.get()

        :param reputation_uuid: A UUID string identifying this reputation. (required)
        :type reputation_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Reputation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reputation_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_scores_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reputation_uuid']:
            _path_params['reputation_uuid'] = _params['reputation_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "Reputation",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/reputation/scores/{reputation_uuid}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_scores_used_by_list(self, reputation_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this reputation.")], **kwargs) -> List[UsedBy]:  # noqa: E501
        """policies_reputation_scores_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_scores_used_by_list(reputation_uuid, async_req=True)
        >>> result = thread.get()

        :param reputation_uuid: A UUID string identifying this reputation. (required)
        :type reputation_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[UsedBy]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_scores_used_by_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_scores_used_by_list_with_http_info(reputation_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_scores_used_by_list_with_http_info(self, reputation_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this reputation.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_scores_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_scores_used_by_list_with_http_info(reputation_uuid, async_req=True)
        >>> result = thread.get()

        :param reputation_uuid: A UUID string identifying this reputation. (required)
        :type reputation_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[UsedBy], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reputation_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_scores_used_by_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reputation_uuid']:
            _path_params['reputation_uuid'] = _params['reputation_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "List[UsedBy]",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/reputation/scores/{reputation_uuid}/used_by/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_update(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Reputation Policy.")], reputation_policy_request : ReputationPolicyRequest, **kwargs) -> ReputationPolicy:  # noqa: E501
        """policies_reputation_update  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_update(policy_uuid, reputation_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Reputation Policy. (required)
        :type policy_uuid: str
        :param reputation_policy_request: (required)
        :type reputation_policy_request: ReputationPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ReputationPolicy
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_update_with_http_info(policy_uuid, reputation_policy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_update_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Reputation Policy.")], reputation_policy_request : ReputationPolicyRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_update  # noqa: E501

        Reputation Policy Viewset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_update_with_http_info(policy_uuid, reputation_policy_request, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Reputation Policy. (required)
        :type policy_uuid: str
        :param reputation_policy_request: (required)
        :type reputation_policy_request: ReputationPolicyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ReputationPolicy, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid',
            'reputation_policy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['reputation_policy_request'] is not None:
            _body_params = _params['reputation_policy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "ReputationPolicy",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/reputation/{policy_uuid}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def policies_reputation_used_by_list(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Reputation Policy.")], **kwargs) -> List[UsedBy]:  # noqa: E501
        """policies_reputation_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_used_by_list(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Reputation Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[UsedBy]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the policies_reputation_used_by_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.policies_reputation_used_by_list_with_http_info(policy_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def policies_reputation_used_by_list_with_http_info(self, policy_uuid : Annotated[StrictStr, Field(..., description="A UUID string identifying this Reputation Policy.")], **kwargs) -> ApiResponse:  # noqa: E501
        """policies_reputation_used_by_list  # noqa: E501

        Get a list of all objects that use this object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.policies_reputation_used_by_list_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param policy_uuid: A UUID string identifying this Reputation Policy. (required)
        :type policy_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[UsedBy], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'policy_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policies_reputation_used_by_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['policy_uuid']:
            _path_params['policy_uuid'] = _params['policy_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['authentik']  # noqa: E501

        _response_types_map = {
            '200': "List[UsedBy]",
            '400': "ValidationError",
            '403': "GenericError",
        }

        return self.api_client.call_api(
            '/policies/reputation/{policy_uuid}/used_by/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
