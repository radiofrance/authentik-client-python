# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class PatchedCertificateKeyPairRequest(BaseModel):
    """
    CertificateKeyPair Serializer
    """
    name: Optional[constr(strict=True, min_length=1)] = None
    certificate_data: Optional[constr(strict=True, min_length=1)] = Field(None, description="PEM-encoded Certificate data")
    key_data: Optional[StrictStr] = Field(None, description="Optional Private Key. If this is set, you can use this keypair for encryption.")
    __properties = ["name", "certificate_data", "key_data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedCertificateKeyPairRequest:
        """Create an instance of PatchedCertificateKeyPairRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedCertificateKeyPairRequest:
        """Create an instance of PatchedCertificateKeyPairRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedCertificateKeyPairRequest.parse_obj(obj)

        _obj = PatchedCertificateKeyPairRequest.parse_obj({
            "name": obj.get("name"),
            "certificate_data": obj.get("certificate_data"),
            "key_data": obj.get("key_data")
        })
        return _obj


