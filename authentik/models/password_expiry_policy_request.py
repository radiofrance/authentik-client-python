# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, conint, constr

class PasswordExpiryPolicyRequest(BaseModel):
    """
    Password Expiry Policy Serializer
    """
    name: constr(strict=True, min_length=1) = Field(...)
    execution_logging: Optional[StrictBool] = Field(None, description="When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.")
    days: conint(strict=True, le=2147483647, ge=-2147483648) = Field(...)
    deny_only: Optional[StrictBool] = None
    __properties = ["name", "execution_logging", "days", "deny_only"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PasswordExpiryPolicyRequest:
        """Create an instance of PasswordExpiryPolicyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PasswordExpiryPolicyRequest:
        """Create an instance of PasswordExpiryPolicyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PasswordExpiryPolicyRequest.parse_obj(obj)

        _obj = PasswordExpiryPolicyRequest.parse_obj({
            "name": obj.get("name"),
            "execution_logging": obj.get("execution_logging"),
            "days": obj.get("days"),
            "deny_only": obj.get("deny_only")
        })
        return _obj


