# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict
from pydantic import BaseModel, Field, StrictBool, StrictStr
from authentik.models.system_runtime import SystemRuntime

class System(BaseModel):
    """
    Get system information.
    """
    http_headers: Dict[str, StrictStr] = Field(..., description="Get HTTP Request headers")
    http_host: StrictStr = Field(..., description="Get HTTP host")
    http_is_secure: StrictBool = Field(..., description="Get HTTP Secure flag")
    runtime: SystemRuntime = Field(...)
    tenant: StrictStr = Field(..., description="Currently active tenant")
    server_time: datetime = Field(..., description="Current server time")
    embedded_outpost_host: StrictStr = Field(..., description="Get the FQDN configured on the embedded outpost")
    __properties = ["http_headers", "http_host", "http_is_secure", "runtime", "tenant", "server_time", "embedded_outpost_host"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> System:
        """Create an instance of System from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "http_headers",
                            "http_host",
                            "http_is_secure",
                            "tenant",
                            "server_time",
                            "embedded_outpost_host",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of runtime
        if self.runtime:
            _dict['runtime'] = self.runtime.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> System:
        """Create an instance of System from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return System.parse_obj(obj)

        _obj = System.parse_obj({
            "http_headers": obj.get("http_headers"),
            "http_host": obj.get("http_host"),
            "http_is_secure": obj.get("http_is_secure"),
            "runtime": SystemRuntime.from_dict(obj.get("runtime")) if obj.get("runtime") is not None else None,
            "tenant": obj.get("tenant"),
            "server_time": obj.get("server_time"),
            "embedded_outpost_host": obj.get("embedded_outpost_host")
        })
        return _obj


