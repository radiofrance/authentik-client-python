# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, constr, validator
from authentik.models.denied_action_enum import DeniedActionEnum
from authentik.models.flow_designation_enum import FlowDesignationEnum
from authentik.models.layout_enum import LayoutEnum
from authentik.models.policy_engine_mode import PolicyEngineMode

class FlowSetRequest(BaseModel):
    """
    Stripped down flow serializer
    """
    name: constr(strict=True, min_length=1) = Field(...)
    slug: constr(strict=True, max_length=50, min_length=1) = Field(..., description="Visible in the URL.")
    title: constr(strict=True, min_length=1) = Field(..., description="Shown as the Title in Flow pages.")
    designation: FlowDesignationEnum = Field(...)
    policy_engine_mode: Optional[PolicyEngineMode] = None
    compatibility_mode: Optional[StrictBool] = Field(None, description="Enable compatibility mode, increases compatibility with password managers on mobile devices.")
    layout: Optional[LayoutEnum] = None
    denied_action: Optional[DeniedActionEnum] = None
    __properties = ["name", "slug", "title", "designation", "policy_engine_mode", "compatibility_mode", "layout", "denied_action"]

    @validator('slug')
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FlowSetRequest:
        """Create an instance of FlowSetRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FlowSetRequest:
        """Create an instance of FlowSetRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FlowSetRequest.parse_obj(obj)

        _obj = FlowSetRequest.parse_obj({
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "title": obj.get("title"),
            "designation": obj.get("designation"),
            "policy_engine_mode": obj.get("policy_engine_mode"),
            "compatibility_mode": obj.get("compatibility_mode"),
            "layout": obj.get("layout"),
            "denied_action": obj.get("denied_action")
        })
        return _obj


