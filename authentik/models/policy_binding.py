# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conint
from authentik.models.group import Group
from authentik.models.policy import Policy
from authentik.models.user import User

class PolicyBinding(BaseModel):
    """
    PolicyBinding Serializer
    """
    pk: StrictStr = Field(...)
    policy: Optional[StrictStr] = None
    group: Optional[StrictStr] = None
    user: Optional[StrictInt] = None
    policy_obj: Policy = Field(...)
    group_obj: Group = Field(...)
    user_obj: User = Field(...)
    target: StrictStr = Field(...)
    negate: Optional[StrictBool] = Field(None, description="Negates the outcome of the policy. Messages are unaffected.")
    enabled: Optional[StrictBool] = None
    order: conint(strict=True, le=2147483647, ge=-2147483648) = Field(...)
    timeout: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = Field(None, description="Timeout after which Policy execution is terminated.")
    __properties = ["pk", "policy", "group", "user", "policy_obj", "group_obj", "user_obj", "target", "negate", "enabled", "order", "timeout"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PolicyBinding:
        """Create an instance of PolicyBinding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "pk",
                            "policy_obj",
                            "group_obj",
                            "user_obj",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of policy_obj
        if self.policy_obj:
            _dict['policy_obj'] = self.policy_obj.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_obj
        if self.group_obj:
            _dict['group_obj'] = self.group_obj.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_obj
        if self.user_obj:
            _dict['user_obj'] = self.user_obj.to_dict()
        # set to None if policy (nullable) is None
        # and __fields_set__ contains the field
        if self.policy is None and "policy" in self.__fields_set__:
            _dict['policy'] = None

        # set to None if group (nullable) is None
        # and __fields_set__ contains the field
        if self.group is None and "group" in self.__fields_set__:
            _dict['group'] = None

        # set to None if user (nullable) is None
        # and __fields_set__ contains the field
        if self.user is None and "user" in self.__fields_set__:
            _dict['user'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyBinding:
        """Create an instance of PolicyBinding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PolicyBinding.parse_obj(obj)

        _obj = PolicyBinding.parse_obj({
            "pk": obj.get("pk"),
            "policy": obj.get("policy"),
            "group": obj.get("group"),
            "user": obj.get("user"),
            "policy_obj": Policy.from_dict(obj.get("policy_obj")) if obj.get("policy_obj") is not None else None,
            "group_obj": Group.from_dict(obj.get("group_obj")) if obj.get("group_obj") is not None else None,
            "user_obj": User.from_dict(obj.get("user_obj")) if obj.get("user_obj") is not None else None,
            "target": obj.get("target"),
            "negate": obj.get("negate"),
            "enabled": obj.get("enabled"),
            "order": obj.get("order"),
            "timeout": obj.get("timeout")
        })
        return _obj


