# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, constr, validator
from authentik.models.policy_engine_mode import PolicyEngineMode

class ApplicationRequest(BaseModel):
    """
    Application Serializer
    """
    name: constr(strict=True, min_length=1) = Field(..., description="Application's display Name.")
    slug: constr(strict=True, max_length=50, min_length=1) = Field(..., description="Internal application name, used in URLs.")
    provider: Optional[StrictInt] = None
    backchannel_providers: Optional[conlist(StrictInt)] = None
    open_in_new_tab: Optional[StrictBool] = Field(None, description="Open launch URL in a new browser tab or window.")
    meta_launch_url: Optional[StrictStr] = None
    meta_description: Optional[StrictStr] = None
    meta_publisher: Optional[StrictStr] = None
    policy_engine_mode: Optional[PolicyEngineMode] = None
    group: Optional[StrictStr] = None
    __properties = ["name", "slug", "provider", "backchannel_providers", "open_in_new_tab", "meta_launch_url", "meta_description", "meta_publisher", "policy_engine_mode", "group"]

    @validator('slug')
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApplicationRequest:
        """Create an instance of ApplicationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if provider (nullable) is None
        # and __fields_set__ contains the field
        if self.provider is None and "provider" in self.__fields_set__:
            _dict['provider'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApplicationRequest:
        """Create an instance of ApplicationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApplicationRequest.parse_obj(obj)

        _obj = ApplicationRequest.parse_obj({
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "provider": obj.get("provider"),
            "backchannel_providers": obj.get("backchannel_providers"),
            "open_in_new_tab": obj.get("open_in_new_tab"),
            "meta_launch_url": obj.get("meta_launch_url"),
            "meta_description": obj.get("meta_description"),
            "meta_publisher": obj.get("meta_publisher"),
            "policy_engine_mode": obj.get("policy_engine_mode"),
            "group": obj.get("group")
        })
        return _obj


