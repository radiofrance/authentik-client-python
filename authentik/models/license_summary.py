# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictBool, StrictInt

class LicenseSummary(BaseModel):
    """
    Serializer for license status
    """
    internal_users: StrictInt = Field(...)
    external_users: StrictInt = Field(...)
    valid: StrictBool = Field(...)
    show_admin_warning: StrictBool = Field(...)
    show_user_warning: StrictBool = Field(...)
    read_only: StrictBool = Field(...)
    latest_valid: datetime = Field(...)
    has_license: StrictBool = Field(...)
    __properties = ["internal_users", "external_users", "valid", "show_admin_warning", "show_user_warning", "read_only", "latest_valid", "has_license"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LicenseSummary:
        """Create an instance of LicenseSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LicenseSummary:
        """Create an instance of LicenseSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LicenseSummary.parse_obj(obj)

        _obj = LicenseSummary.parse_obj({
            "internal_users": obj.get("internal_users"),
            "external_users": obj.get("external_users"),
            "valid": obj.get("valid"),
            "show_admin_warning": obj.get("show_admin_warning"),
            "show_user_warning": obj.get("show_user_warning"),
            "read_only": obj.get("read_only"),
            "latest_valid": obj.get("latest_valid"),
            "has_license": obj.get("has_license")
        })
        return _obj


