# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conint

class ReputationPolicy(BaseModel):
    """
    Reputation Policy Serializer
    """
    pk: StrictStr = Field(...)
    name: StrictStr = Field(...)
    execution_logging: Optional[StrictBool] = Field(None, description="When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.")
    component: StrictStr = Field(..., description="Get object component so that we know how to edit the object")
    verbose_name: StrictStr = Field(..., description="Return object's verbose_name")
    verbose_name_plural: StrictStr = Field(..., description="Return object's plural verbose_name")
    meta_model_name: StrictStr = Field(..., description="Return internal model name")
    bound_to: StrictInt = Field(..., description="Return objects policy is bound to")
    check_ip: Optional[StrictBool] = None
    check_username: Optional[StrictBool] = None
    threshold: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    __properties = ["pk", "name", "execution_logging", "component", "verbose_name", "verbose_name_plural", "meta_model_name", "bound_to", "check_ip", "check_username", "threshold"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReputationPolicy:
        """Create an instance of ReputationPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "pk",
                            "component",
                            "verbose_name",
                            "verbose_name_plural",
                            "meta_model_name",
                            "bound_to",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReputationPolicy:
        """Create an instance of ReputationPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReputationPolicy.parse_obj(obj)

        _obj = ReputationPolicy.parse_obj({
            "pk": obj.get("pk"),
            "name": obj.get("name"),
            "execution_logging": obj.get("execution_logging"),
            "component": obj.get("component"),
            "verbose_name": obj.get("verbose_name"),
            "verbose_name_plural": obj.get("verbose_name_plural"),
            "meta_model_name": obj.get("meta_model_name"),
            "bound_to": obj.get("bound_to"),
            "check_ip": obj.get("check_ip"),
            "check_username": obj.get("check_username"),
            "threshold": obj.get("threshold")
        })
        return _obj


