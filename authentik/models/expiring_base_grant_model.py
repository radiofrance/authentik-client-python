# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from authentik.models.o_auth2_provider import OAuth2Provider
from authentik.models.user import User

class ExpiringBaseGrantModel(BaseModel):
    """
    Serializer for BaseGrantModel and ExpiringBaseGrant
    """
    pk: StrictInt = Field(...)
    provider: OAuth2Provider = Field(...)
    user: User = Field(...)
    is_expired: StrictBool = Field(..., description="Check if token is expired yet.")
    expires: Optional[datetime] = None
    scope: conlist(StrictStr) = Field(...)
    __properties = ["pk", "provider", "user", "is_expired", "expires", "scope"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExpiringBaseGrantModel:
        """Create an instance of ExpiringBaseGrantModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "pk",
                            "is_expired",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExpiringBaseGrantModel:
        """Create an instance of ExpiringBaseGrantModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExpiringBaseGrantModel.parse_obj(obj)

        _obj = ExpiringBaseGrantModel.parse_obj({
            "pk": obj.get("pk"),
            "provider": OAuth2Provider.from_dict(obj.get("provider")) if obj.get("provider") is not None else None,
            "user": User.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "is_expired": obj.get("is_expired"),
            "expires": obj.get("expires"),
            "scope": obj.get("scope")
        })
        return _obj


