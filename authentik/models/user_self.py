# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, constr, validator
from authentik.models.user_self_groups import UserSelfGroups
from authentik.models.user_type_enum import UserTypeEnum

class UserSelf(BaseModel):
    """
    User Serializer for information a user can retrieve about themselves
    """
    pk: StrictInt = Field(...)
    username: constr(strict=True, max_length=150) = Field(..., description="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.")
    name: StrictStr = Field(..., description="User's display name.")
    is_active: StrictBool = Field(..., description="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.")
    is_superuser: StrictBool = Field(...)
    groups: conlist(UserSelfGroups) = Field(...)
    email: Optional[constr(strict=True, max_length=254)] = None
    avatar: StrictStr = Field(...)
    uid: StrictStr = Field(...)
    settings: Dict[str, Any] = Field(..., description="Get user settings with tenant and group settings applied")
    type: Optional[UserTypeEnum] = None
    __properties = ["pk", "username", "name", "is_active", "is_superuser", "groups", "email", "avatar", "uid", "settings", "type"]

    @validator('username')
    def username_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\w.@+-]+$", value):
            raise ValueError(r"must validate the regular expression /^[\w.@+-]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserSelf:
        """Create an instance of UserSelf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "pk",
                            "is_active",
                            "is_superuser",
                            "groups",
                            "avatar",
                            "uid",
                            "settings",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item in self.groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserSelf:
        """Create an instance of UserSelf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserSelf.parse_obj(obj)

        _obj = UserSelf.parse_obj({
            "pk": obj.get("pk"),
            "username": obj.get("username"),
            "name": obj.get("name"),
            "is_active": obj.get("is_active"),
            "is_superuser": obj.get("is_superuser"),
            "groups": [UserSelfGroups.from_dict(_item) for _item in obj.get("groups")] if obj.get("groups") is not None else None,
            "email": obj.get("email"),
            "avatar": obj.get("avatar"),
            "uid": obj.get("uid"),
            "settings": obj.get("settings"),
            "type": obj.get("type")
        })
        return _obj


