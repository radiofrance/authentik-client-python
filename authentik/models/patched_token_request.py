# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator
from authentik.models.intent_enum import IntentEnum

class PatchedTokenRequest(BaseModel):
    """
    Token Serializer
    """
    managed: Optional[constr(strict=True, min_length=1)] = Field(None, description="Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.")
    identifier: Optional[constr(strict=True, max_length=255, min_length=1)] = None
    intent: Optional[IntentEnum] = None
    user: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    expires: Optional[datetime] = None
    expiring: Optional[StrictBool] = None
    __properties = ["managed", "identifier", "intent", "user", "description", "expires", "expiring"]

    @validator('identifier')
    def identifier_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedTokenRequest:
        """Create an instance of PatchedTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if managed (nullable) is None
        # and __fields_set__ contains the field
        if self.managed is None and "managed" in self.__fields_set__:
            _dict['managed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedTokenRequest:
        """Create an instance of PatchedTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedTokenRequest.parse_obj(obj)

        _obj = PatchedTokenRequest.parse_obj({
            "managed": obj.get("managed"),
            "identifier": obj.get("identifier"),
            "intent": obj.get("intent"),
            "user": obj.get("user"),
            "description": obj.get("description"),
            "expires": obj.get("expires"),
            "expiring": obj.get("expiring")
        })
        return _obj


