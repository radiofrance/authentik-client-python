# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictInt, constr
from authentik.models.device_challenge_request import DeviceChallengeRequest

class AuthenticatorValidationChallengeResponseRequest(BaseModel):
    """
    Challenge used for Code-based and WebAuthn authenticators
    """
    component: Optional[constr(strict=True, min_length=1)] = 'ak-stage-authenticator-validate'
    selected_challenge: Optional[DeviceChallengeRequest] = None
    selected_stage: Optional[constr(strict=True, min_length=1)] = None
    code: Optional[constr(strict=True, min_length=1)] = None
    webauthn: Optional[Dict[str, Any]] = None
    duo: Optional[StrictInt] = None
    __properties = ["component", "selected_challenge", "selected_stage", "code", "webauthn", "duo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthenticatorValidationChallengeResponseRequest:
        """Create an instance of AuthenticatorValidationChallengeResponseRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of selected_challenge
        if self.selected_challenge:
            _dict['selected_challenge'] = self.selected_challenge.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthenticatorValidationChallengeResponseRequest:
        """Create an instance of AuthenticatorValidationChallengeResponseRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthenticatorValidationChallengeResponseRequest.parse_obj(obj)

        _obj = AuthenticatorValidationChallengeResponseRequest.parse_obj({
            "component": obj.get("component") if obj.get("component") is not None else 'ak-stage-authenticator-validate',
            "selected_challenge": DeviceChallengeRequest.from_dict(obj.get("selected_challenge")) if obj.get("selected_challenge") is not None else None,
            "selected_stage": obj.get("selected_stage"),
            "code": obj.get("code"),
            "webauthn": obj.get("webauthn"),
            "duo": obj.get("duo")
        })
        return _obj


