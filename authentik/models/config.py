# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, conlist
from authentik.models.capabilities_enum import CapabilitiesEnum
from authentik.models.error_reporting_config import ErrorReportingConfig

class Config(BaseModel):
    """
    Serialize authentik Config into DRF Object
    """
    error_reporting: ErrorReportingConfig = Field(...)
    capabilities: conlist(CapabilitiesEnum) = Field(...)
    cache_timeout: StrictInt = Field(...)
    cache_timeout_flows: StrictInt = Field(...)
    cache_timeout_policies: StrictInt = Field(...)
    cache_timeout_reputation: StrictInt = Field(...)
    __properties = ["error_reporting", "capabilities", "cache_timeout", "cache_timeout_flows", "cache_timeout_policies", "cache_timeout_reputation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Config:
        """Create an instance of Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of error_reporting
        if self.error_reporting:
            _dict['error_reporting'] = self.error_reporting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Config:
        """Create an instance of Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Config.parse_obj(obj)

        _obj = Config.parse_obj({
            "error_reporting": ErrorReportingConfig.from_dict(obj.get("error_reporting")) if obj.get("error_reporting") is not None else None,
            "capabilities": obj.get("capabilities"),
            "cache_timeout": obj.get("cache_timeout"),
            "cache_timeout_flows": obj.get("cache_timeout_flows"),
            "cache_timeout_policies": obj.get("cache_timeout_policies"),
            "cache_timeout_reputation": obj.get("cache_timeout_reputation")
        })
        return _obj


