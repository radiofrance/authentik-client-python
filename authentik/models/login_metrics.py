# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from authentik.models.coordinate import Coordinate

class LoginMetrics(BaseModel):
    """
    Login Metrics per 1h
    """
    logins: conlist(Coordinate) = Field(...)
    logins_failed: conlist(Coordinate) = Field(...)
    authorizations: conlist(Coordinate) = Field(...)
    __properties = ["logins", "logins_failed", "authorizations"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoginMetrics:
        """Create an instance of LoginMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "logins",
                            "logins_failed",
                            "authorizations",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in logins (list)
        _items = []
        if self.logins:
            for _item in self.logins:
                if _item:
                    _items.append(_item.to_dict())
            _dict['logins'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in logins_failed (list)
        _items = []
        if self.logins_failed:
            for _item in self.logins_failed:
                if _item:
                    _items.append(_item.to_dict())
            _dict['logins_failed'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authorizations (list)
        _items = []
        if self.authorizations:
            for _item in self.authorizations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['authorizations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoginMetrics:
        """Create an instance of LoginMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoginMetrics.parse_obj(obj)

        _obj = LoginMetrics.parse_obj({
            "logins": [Coordinate.from_dict(_item) for _item in obj.get("logins")] if obj.get("logins") is not None else None,
            "logins_failed": [Coordinate.from_dict(_item) for _item in obj.get("logins_failed")] if obj.get("logins_failed") is not None else None,
            "authorizations": [Coordinate.from_dict(_item) for _item in obj.get("authorizations")] if obj.get("authorizations") is not None else None
        })
        return _obj


