# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr

class DockerServiceConnectionRequest(BaseModel):
    """
    DockerServiceConnection Serializer
    """
    name: constr(strict=True, min_length=1) = Field(...)
    local: Optional[StrictBool] = Field(None, description="If enabled, use the local connection. Required Docker socket/Kubernetes Integration")
    url: constr(strict=True, min_length=1) = Field(..., description="Can be in the format of 'unix://<path>' when connecting to a local docker daemon, or 'https://<hostname>:2376' when connecting to a remote system.")
    tls_verification: Optional[StrictStr] = Field(None, description="CA which the endpoint's Certificate is verified against. Can be left empty for no validation.")
    tls_authentication: Optional[StrictStr] = Field(None, description="Certificate/Key used for authentication. Can be left empty for no authentication.")
    __properties = ["name", "local", "url", "tls_verification", "tls_authentication"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DockerServiceConnectionRequest:
        """Create an instance of DockerServiceConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if tls_verification (nullable) is None
        # and __fields_set__ contains the field
        if self.tls_verification is None and "tls_verification" in self.__fields_set__:
            _dict['tls_verification'] = None

        # set to None if tls_authentication (nullable) is None
        # and __fields_set__ contains the field
        if self.tls_authentication is None and "tls_authentication" in self.__fields_set__:
            _dict['tls_authentication'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DockerServiceConnectionRequest:
        """Create an instance of DockerServiceConnectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DockerServiceConnectionRequest.parse_obj(obj)

        _obj = DockerServiceConnectionRequest.parse_obj({
            "name": obj.get("name"),
            "local": obj.get("local"),
            "url": obj.get("url"),
            "tls_verification": obj.get("tls_verification"),
            "tls_authentication": obj.get("tls_authentication")
        })
        return _obj


