# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr, constr

class PatchedUserOAuthSourceConnectionRequest(BaseModel):
    """
    OAuth Source Serializer
    """
    user: Optional[StrictInt] = None
    identifier: Optional[constr(strict=True, max_length=255, min_length=1)] = None
    access_token: Optional[StrictStr] = None
    __properties = ["user", "identifier", "access_token"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedUserOAuthSourceConnectionRequest:
        """Create an instance of PatchedUserOAuthSourceConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if access_token (nullable) is None
        # and __fields_set__ contains the field
        if self.access_token is None and "access_token" in self.__fields_set__:
            _dict['access_token'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedUserOAuthSourceConnectionRequest:
        """Create an instance of PatchedUserOAuthSourceConnectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedUserOAuthSourceConnectionRequest.parse_obj(obj)

        _obj = PatchedUserOAuthSourceConnectionRequest.parse_obj({
            "user": obj.get("user"),
            "identifier": obj.get("identifier"),
            "access_token": obj.get("access_token")
        })
        return _obj


