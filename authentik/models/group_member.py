# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator

class GroupMember(BaseModel):
    """
    Stripped down user serializer to show relevant users for groups
    """
    pk: StrictInt = Field(...)
    username: constr(strict=True, max_length=150) = Field(..., description="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.")
    name: StrictStr = Field(..., description="User's display name.")
    is_active: Optional[StrictBool] = Field(None, description="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.")
    last_login: Optional[datetime] = None
    email: Optional[constr(strict=True, max_length=254)] = None
    attributes: Optional[Dict[str, Any]] = None
    uid: StrictStr = Field(...)
    __properties = ["pk", "username", "name", "is_active", "last_login", "email", "attributes", "uid"]

    @validator('username')
    def username_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\w.@+-]+$", value):
            raise ValueError(r"must validate the regular expression /^[\w.@+-]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GroupMember:
        """Create an instance of GroupMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "pk",
                            "uid",
                          },
                          exclude_none=True)
        # set to None if last_login (nullable) is None
        # and __fields_set__ contains the field
        if self.last_login is None and "last_login" in self.__fields_set__:
            _dict['last_login'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GroupMember:
        """Create an instance of GroupMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GroupMember.parse_obj(obj)

        _obj = GroupMember.parse_obj({
            "pk": obj.get("pk"),
            "username": obj.get("username"),
            "name": obj.get("name"),
            "is_active": obj.get("is_active"),
            "last_login": obj.get("last_login"),
            "email": obj.get("email"),
            "attributes": obj.get("attributes"),
            "uid": obj.get("uid")
        })
        return _obj


