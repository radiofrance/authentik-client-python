# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictBool, StrictStr

class OutpostHealth(BaseModel):
    """
    Outpost health status
    """
    uid: StrictStr = Field(...)
    last_seen: datetime = Field(...)
    version: StrictStr = Field(...)
    version_should: StrictStr = Field(...)
    version_outdated: StrictBool = Field(...)
    build_hash: StrictStr = Field(...)
    build_hash_should: StrictStr = Field(...)
    hostname: StrictStr = Field(...)
    __properties = ["uid", "last_seen", "version", "version_should", "version_outdated", "build_hash", "build_hash_should", "hostname"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OutpostHealth:
        """Create an instance of OutpostHealth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "uid",
                            "last_seen",
                            "version",
                            "version_should",
                            "version_outdated",
                            "build_hash",
                            "build_hash_should",
                            "hostname",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OutpostHealth:
        """Create an instance of OutpostHealth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OutpostHealth.parse_obj(obj)

        _obj = OutpostHealth.parse_obj({
            "uid": obj.get("uid"),
            "last_seen": obj.get("last_seen"),
            "version": obj.get("version"),
            "version_should": obj.get("version_should"),
            "version_outdated": obj.get("version_outdated"),
            "build_hash": obj.get("build_hash"),
            "build_hash_should": obj.get("build_hash_should"),
            "hostname": obj.get("hostname")
        })
        return _obj


