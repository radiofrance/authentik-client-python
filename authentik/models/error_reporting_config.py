# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class ErrorReportingConfig(BaseModel):
    """
    Config for error reporting
    """
    enabled: StrictBool = Field(...)
    sentry_dsn: StrictStr = Field(...)
    environment: StrictStr = Field(...)
    send_pii: StrictBool = Field(...)
    traces_sample_rate: Union[StrictFloat, StrictInt] = Field(...)
    __properties = ["enabled", "sentry_dsn", "environment", "send_pii", "traces_sample_rate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ErrorReportingConfig:
        """Create an instance of ErrorReportingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "enabled",
                            "sentry_dsn",
                            "environment",
                            "send_pii",
                            "traces_sample_rate",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ErrorReportingConfig:
        """Create an instance of ErrorReportingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ErrorReportingConfig.parse_obj(obj)

        _obj = ErrorReportingConfig.parse_obj({
            "enabled": obj.get("enabled"),
            "sentry_dsn": obj.get("sentry_dsn"),
            "environment": obj.get("environment"),
            "send_pii": obj.get("send_pii"),
            "traces_sample_rate": obj.get("traces_sample_rate")
        })
        return _obj


