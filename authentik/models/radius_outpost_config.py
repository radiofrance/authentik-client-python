# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class RadiusOutpostConfig(BaseModel):
    """
    RadiusProvider Serializer
    """
    pk: StrictInt = Field(...)
    name: StrictStr = Field(...)
    application_slug: StrictStr = Field(...)
    auth_flow_slug: StrictStr = Field(...)
    client_networks: Optional[StrictStr] = Field(None, description="List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.")
    shared_secret: Optional[StrictStr] = Field(None, description="Shared secret between clients and server to hash packets.")
    __properties = ["pk", "name", "application_slug", "auth_flow_slug", "client_networks", "shared_secret"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RadiusOutpostConfig:
        """Create an instance of RadiusOutpostConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "pk",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RadiusOutpostConfig:
        """Create an instance of RadiusOutpostConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RadiusOutpostConfig.parse_obj(obj)

        _obj = RadiusOutpostConfig.parse_obj({
            "pk": obj.get("pk"),
            "name": obj.get("name"),
            "application_slug": obj.get("application_slug"),
            "auth_flow_slug": obj.get("auth_flow_slug"),
            "client_networks": obj.get("client_networks"),
            "shared_secret": obj.get("shared_secret")
        })
        return _obj


