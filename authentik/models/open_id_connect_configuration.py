# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist

class OpenIDConnectConfiguration(BaseModel):
    """
    rest_framework Serializer for OIDC Configuration
    """
    issuer: StrictStr = Field(...)
    authorization_endpoint: StrictStr = Field(...)
    token_endpoint: StrictStr = Field(...)
    userinfo_endpoint: StrictStr = Field(...)
    end_session_endpoint: StrictStr = Field(...)
    introspection_endpoint: StrictStr = Field(...)
    jwks_uri: StrictStr = Field(...)
    response_types_supported: conlist(StrictStr) = Field(...)
    id_token_signing_alg_values_supported: conlist(StrictStr) = Field(...)
    subject_types_supported: conlist(StrictStr) = Field(...)
    token_endpoint_auth_methods_supported: conlist(StrictStr) = Field(...)
    __properties = ["issuer", "authorization_endpoint", "token_endpoint", "userinfo_endpoint", "end_session_endpoint", "introspection_endpoint", "jwks_uri", "response_types_supported", "id_token_signing_alg_values_supported", "subject_types_supported", "token_endpoint_auth_methods_supported"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenIDConnectConfiguration:
        """Create an instance of OpenIDConnectConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenIDConnectConfiguration:
        """Create an instance of OpenIDConnectConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenIDConnectConfiguration.parse_obj(obj)

        _obj = OpenIDConnectConfiguration.parse_obj({
            "issuer": obj.get("issuer"),
            "authorization_endpoint": obj.get("authorization_endpoint"),
            "token_endpoint": obj.get("token_endpoint"),
            "userinfo_endpoint": obj.get("userinfo_endpoint"),
            "end_session_endpoint": obj.get("end_session_endpoint"),
            "introspection_endpoint": obj.get("introspection_endpoint"),
            "jwks_uri": obj.get("jwks_uri"),
            "response_types_supported": obj.get("response_types_supported"),
            "id_token_signing_alg_values_supported": obj.get("id_token_signing_alg_values_supported"),
            "subject_types_supported": obj.get("subject_types_supported"),
            "token_endpoint_auth_methods_supported": obj.get("token_endpoint_auth_methods_supported")
        })
        return _obj


