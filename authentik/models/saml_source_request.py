# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator
from authentik.models.binding_type_enum import BindingTypeEnum
from authentik.models.digest_algorithm_enum import DigestAlgorithmEnum
from authentik.models.name_id_policy_enum import NameIdPolicyEnum
from authentik.models.policy_engine_mode import PolicyEngineMode
from authentik.models.signature_algorithm_enum import SignatureAlgorithmEnum
from authentik.models.user_matching_mode_enum import UserMatchingModeEnum

class SAMLSourceRequest(BaseModel):
    """
    SAMLSource Serializer
    """
    name: constr(strict=True, min_length=1) = Field(..., description="Source's display Name.")
    slug: constr(strict=True, max_length=50, min_length=1) = Field(..., description="Internal source name, used in URLs.")
    enabled: Optional[StrictBool] = None
    authentication_flow: Optional[StrictStr] = Field(None, description="Flow to use when authenticating existing users.")
    enrollment_flow: Optional[StrictStr] = Field(None, description="Flow to use when enrolling new users.")
    policy_engine_mode: Optional[PolicyEngineMode] = None
    user_matching_mode: Optional[UserMatchingModeEnum] = None
    user_path_template: Optional[constr(strict=True, min_length=1)] = None
    pre_authentication_flow: StrictStr = Field(..., description="Flow used before authentication.")
    issuer: Optional[StrictStr] = Field(None, description="Also known as Entity ID. Defaults the Metadata URL.")
    sso_url: constr(strict=True, max_length=200, min_length=1) = Field(..., description="URL that the initial Login request is sent to.")
    slo_url: Optional[constr(strict=True, max_length=200)] = Field(None, description="Optional URL if your IDP supports Single-Logout.")
    allow_idp_initiated: Optional[StrictBool] = Field(None, description="Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.")
    name_id_policy: Optional[NameIdPolicyEnum] = None
    binding_type: Optional[BindingTypeEnum] = None
    verification_kp: Optional[StrictStr] = Field(None, description="When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.")
    signing_kp: Optional[StrictStr] = Field(None, description="Keypair used to sign outgoing Responses going to the Identity Provider.")
    digest_algorithm: Optional[DigestAlgorithmEnum] = None
    signature_algorithm: Optional[SignatureAlgorithmEnum] = None
    temporary_user_delete_after: Optional[constr(strict=True, min_length=1)] = Field(None, description="Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).")
    __properties = ["name", "slug", "enabled", "authentication_flow", "enrollment_flow", "policy_engine_mode", "user_matching_mode", "user_path_template", "pre_authentication_flow", "issuer", "sso_url", "slo_url", "allow_idp_initiated", "name_id_policy", "binding_type", "verification_kp", "signing_kp", "digest_algorithm", "signature_algorithm", "temporary_user_delete_after"]

    @validator('slug')
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SAMLSourceRequest:
        """Create an instance of SAMLSourceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if authentication_flow (nullable) is None
        # and __fields_set__ contains the field
        if self.authentication_flow is None and "authentication_flow" in self.__fields_set__:
            _dict['authentication_flow'] = None

        # set to None if enrollment_flow (nullable) is None
        # and __fields_set__ contains the field
        if self.enrollment_flow is None and "enrollment_flow" in self.__fields_set__:
            _dict['enrollment_flow'] = None

        # set to None if slo_url (nullable) is None
        # and __fields_set__ contains the field
        if self.slo_url is None and "slo_url" in self.__fields_set__:
            _dict['slo_url'] = None

        # set to None if verification_kp (nullable) is None
        # and __fields_set__ contains the field
        if self.verification_kp is None and "verification_kp" in self.__fields_set__:
            _dict['verification_kp'] = None

        # set to None if signing_kp (nullable) is None
        # and __fields_set__ contains the field
        if self.signing_kp is None and "signing_kp" in self.__fields_set__:
            _dict['signing_kp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SAMLSourceRequest:
        """Create an instance of SAMLSourceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SAMLSourceRequest.parse_obj(obj)

        _obj = SAMLSourceRequest.parse_obj({
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "enabled": obj.get("enabled"),
            "authentication_flow": obj.get("authentication_flow"),
            "enrollment_flow": obj.get("enrollment_flow"),
            "policy_engine_mode": obj.get("policy_engine_mode"),
            "user_matching_mode": obj.get("user_matching_mode"),
            "user_path_template": obj.get("user_path_template"),
            "pre_authentication_flow": obj.get("pre_authentication_flow"),
            "issuer": obj.get("issuer"),
            "sso_url": obj.get("sso_url"),
            "slo_url": obj.get("slo_url"),
            "allow_idp_initiated": obj.get("allow_idp_initiated"),
            "name_id_policy": obj.get("name_id_policy"),
            "binding_type": obj.get("binding_type"),
            "verification_kp": obj.get("verification_kp"),
            "signing_kp": obj.get("signing_kp"),
            "digest_algorithm": obj.get("digest_algorithm"),
            "signature_algorithm": obj.get("signature_algorithm"),
            "temporary_user_delete_after": obj.get("temporary_user_delete_after")
        })
        return _obj


