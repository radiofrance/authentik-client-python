# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, constr

class UserServiceAccountRequest(BaseModel):
    """
    UserServiceAccountRequest
    """
    name: constr(strict=True, min_length=1) = Field(...)
    create_group: Optional[StrictBool] = False
    expiring: Optional[StrictBool] = True
    expires: Optional[datetime] = Field(None, description="If not provided, valid for 360 days")
    __properties = ["name", "create_group", "expiring", "expires"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserServiceAccountRequest:
        """Create an instance of UserServiceAccountRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserServiceAccountRequest:
        """Create an instance of UserServiceAccountRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserServiceAccountRequest.parse_obj(obj)

        _obj = UserServiceAccountRequest.parse_obj({
            "name": obj.get("name"),
            "create_group": obj.get("create_group") if obj.get("create_group") is not None else False,
            "expiring": obj.get("expiring") if obj.get("expiring") is not None else True,
            "expires": obj.get("expires")
        })
        return _obj


