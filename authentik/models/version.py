# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr

class Version(BaseModel):
    """
    Get running and latest version.
    """
    version_current: StrictStr = Field(..., description="Get current version")
    version_latest: StrictStr = Field(..., description="Get latest version from cache")
    build_hash: StrictStr = Field(..., description="Get build hash, if version is not latest or released")
    outdated: StrictBool = Field(..., description="Check if we're running the latest version")
    __properties = ["version_current", "version_latest", "build_hash", "outdated"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Version:
        """Create an instance of Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "version_current",
                            "version_latest",
                            "build_hash",
                            "outdated",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Version:
        """Create an instance of Version from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Version.parse_obj(obj)

        _obj = Version.parse_obj({
            "version_current": obj.get("version_current"),
            "version_latest": obj.get("version_latest"),
            "build_hash": obj.get("build_hash"),
            "outdated": obj.get("outdated")
        })
        return _obj


