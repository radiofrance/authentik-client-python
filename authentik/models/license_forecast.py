# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2023.6.1
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt

class LicenseForecast(BaseModel):
    """
    Serializer for license forecast
    """
    internal_users: StrictInt = Field(...)
    external_users: StrictInt = Field(...)
    forecasted_internal_users: StrictInt = Field(...)
    forecasted_external_users: StrictInt = Field(...)
    __properties = ["internal_users", "external_users", "forecasted_internal_users", "forecasted_external_users"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LicenseForecast:
        """Create an instance of LicenseForecast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LicenseForecast:
        """Create an instance of LicenseForecast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LicenseForecast.parse_obj(obj)

        _obj = LicenseForecast.parse_obj({
            "internal_users": obj.get("internal_users"),
            "external_users": obj.get("external_users"),
            "forecasted_internal_users": obj.get("forecasted_internal_users"),
            "forecasted_external_users": obj.get("forecasted_external_users")
        })
        return _obj


